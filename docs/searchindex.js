Search.setIndex({"docnames": ["api_reference", "generated/spe.bagging.ParametricBaggingRegressor", "generated/spe.estimators.cp_adaptive_smoother", "generated/spe.estimators.cp_bagged", "generated/spe.estimators.cp_general", "generated/spe.estimators.cp_smoother", "generated/spe.forest.ParametricRandomForestRegressor", "index", "user_guide"], "filenames": ["api_reference.rst", "generated/spe.bagging.ParametricBaggingRegressor.rst", "generated/spe.estimators.cp_adaptive_smoother.rst", "generated/spe.estimators.cp_bagged.rst", "generated/spe.estimators.cp_general.rst", "generated/spe.estimators.cp_smoother.rst", "generated/spe.forest.ParametricRandomForestRegressor.rst", "index.rst", "user_guide.rst"], "titles": ["API Reference", "spe.bagging.ParametricBaggingRegressor", "spe.estimators.cp_adaptive_smoother", "spe.estimators.cp_bagged", "spe.estimators.cp_general", "spe.estimators.cp_smoother", "spe.forest.ParametricRandomForestRegressor", "SPE Documentation", "User Guide"], "terms": {"class": [1, 6], "estim": [1, 6], "none": [1, 2, 3, 4, 5, 6], "n_estim": [1, 3, 6], "10": 1, "max_sampl": [1, 6], "1": [1, 6], "0": [1, 2, 3, 4, 5, 6], "max_featur": [1, 6], "bootstrap": [1, 2, 3, 4, 6], "true": [1, 2, 3, 4, 6], "bootstrap_featur": 1, "fals": [1, 2, 3, 4, 6], "oob_scor": [1, 6], "warm_start": [1, 6], "n_job": [1, 6], "random_st": [1, 6], "verbos": [1, 6], "method": [1, 6], "attribut": [1, 6], "__init__": [1, 6], "fit": [1, 3, 6], "x": [1, 2, 3, 4, 5, 6], "y": [1, 2, 3, 4, 5, 6], "max_depth": [1, 6], "sample_weight": [1, 6], "check_input": 1, "chol_ep": [1, 6], "do_param_boot": [1, 6], "build": [1, 6], "ensembl": [1, 6], "from": [1, 6], "train": [1, 2, 3, 4, 5, 6], "set": [1, 2, 3, 4, 5, 6], "paramet": [1, 2, 3, 4, 5, 6], "arrai": [1, 2, 3, 4, 5, 6], "like": [1, 2, 3, 4, 5, 6], "spars": [1, 6], "matrix": [1, 2, 3, 4, 5, 6], "shape": [1, 2, 3, 4, 5, 6], "n_sampl": [1, 2, 3, 4, 5, 6], "n_featur": [1, 2, 3, 4, 5, 6], "The": [1, 2, 3, 4, 6], "input": [1, 6], "sampl": [1, 2, 3, 4, 5, 6], "matric": 1, "ar": [1, 2, 3, 6], "accept": 1, "onli": [1, 6], "thei": [1, 6], "support": 1, "base": [1, 3, 6], "target": [1, 6], "valu": [1, 2, 4, 6], "label": [1, 6], "classif": [1, 6], "real": [1, 6], "number": [1, 2, 3, 4, 6], "regress": [1, 6], "int": [1, 2, 3, 4], "float": [1, 2, 3, 4, 5, 6], "default": [1, 2, 3, 4, 5, 6], "argument": 1, "us": [1, 2, 3, 4, 6], "instead": [1, 6], "self": [1, 6], "overrid": 1, "when": [1, 6], "construct": 1, "ha": [1, 6], "weight": [1, 6], "If": [1, 2, 3, 4, 6], "equal": [1, 6], "note": [1, 6], "thi": [1, 6], "i": [1, 2, 3, 4, 5, 6], "bool": [1, 2, 3, 4, 5, 6], "function": 1, "option": [1, 2, 3, 4, 5, 6], "choleski": [1, 2, 3, 4, 5, 6], "parametr": [1, 6], "covari": [1, 2, 3, 4, 5, 6], "In": [1, 6], "case": [1, 2, 3, 4, 5, 6], "ignor": [1, 6], "np": [1, 2, 3, 4, 5, 6], "ey": [1, 2, 3, 4, 5, 6], "perform": [1, 2, 4, 6], "return": [1, 2, 3, 4, 5, 6], "object": [1, 2, 3, 4, 5, 6], "get_group_x": [1, 6], "x_pred": 1, "get_linear_smooth": [1, 6], "tr_idx": [1, 2, 3, 4, 5, 6], "ts_idx": [1, 6], "ret_full_p": [1, 6], "get_metadata_rout": [1, 6], "rais": [1, 6], "notimplementederror": 1, "doe": 1, "metadata": [1, 6], "rout": [1, 6], "yet": 1, "get_param": [1, 6], "deep": [1, 6], "get": [1, 6], "contain": [1, 6], "subobject": [1, 6], "param": [1, 6], "dict": [1, 6], "name": [1, 6], "map": [1, 6], "predict": [1, 2, 3, 6], "y_refit": 1, "an": [1, 2, 3, 4, 6], "comput": [1, 2, 3, 4, 5, 6], "mean": [1, 6], "ndarrai": [1, 6], "score": [1, 6], "coeffici": [1, 6], "determin": [1, 6], "r": [1, 2, 6], "2": [1, 6], "defin": [1, 6], "frac": [1, 6], "u": [1, 6], "v": [1, 6], "where": [1, 2, 6], "residu": [1, 6], "sum": [1, 6], "squar": [1, 6], "y_true": [1, 6], "y_pred": [1, 6], "total": [1, 6], "best": [1, 6], "possibl": [1, 6], "can": [1, 6], "neg": [1, 6], "becaus": [1, 6], "model": [1, 2, 3, 4, 5, 6], "arbitrarili": [1, 6], "wors": [1, 6], "A": [1, 6], "constant": [1, 6], "alwai": [1, 6], "expect": [1, 2, 3, 4, 6], "disregard": [1, 6], "featur": [1, 6], "would": [1, 6], "test": [1, 5, 6], "For": [1, 6], "some": [1, 6], "mai": [1, 6], "precomput": [1, 6], "kernel": [1, 6], "list": [1, 6], "gener": [1, 2, 3, 4, 6], "n_samples_fit": [1, 6], "n_output": [1, 6], "w": [1, 2, 3, 6], "t": [1, 6], "call": [1, 6], "regressor": [1, 6], "multioutput": [1, 6], "uniform_averag": [1, 6], "version": [1, 6], "23": [1, 6], "keep": [1, 6], "consist": [1, 6], "r2_score": [1, 6], "influenc": [1, 6], "all": [1, 6], "except": [1, 6], "multioutputregressor": [1, 6], "set_fit_request": [1, 6], "str": [1, 6], "unchang": [1, 6], "request": [1, 6], "pass": [1, 6], "relev": [1, 6], "enable_metadata_rout": [1, 6], "see": [1, 6], "sklearn": [1, 6], "set_config": [1, 6], "pleas": [1, 6], "user": [1, 6], "guid": [1, 6], "how": [1, 6], "mechan": [1, 6], "work": [1, 6], "each": [1, 6], "provid": [1, 6], "meta": [1, 6], "error": [1, 6], "should": [1, 6], "given": [1, 6], "alia": [1, 6], "origin": [1, 2, 3, 4, 6], "util": [1, 6], "metadata_rout": [1, 6], "retain": [1, 6], "exist": [1, 6], "allow": [1, 6], "you": [1, 6], "chang": [1, 6], "other": [1, 6], "new": [1, 6], "3": [1, 6], "sub": [1, 6], "e": [1, 2, 3, 6], "g": [1, 6], "insid": [1, 6], "pipelin": [1, 6], "otherwis": [1, 6], "effect": [1, 6], "updat": [1, 6], "set_param": [1, 6], "simpl": [1, 6], "well": [1, 6], "nest": [1, 6], "latter": [1, 6], "have": [1, 2, 6], "form": [1, 2, 6], "compon": [1, 6], "__": [1, 6], "so": [1, 6], "": [1, 2, 3, 5, 6], "instanc": [1, 6], "set_predict_request": 1, "set_score_request": [1, 6], "estimators_samples_": [1, 6], "subset": [1, 6], "drawn": [1, 6], "dynam": [1, 6], "indic": [1, 6], "identifi": [1, 6], "member": [1, 6], "re": [1, 6], "creat": [1, 6], "properti": [1, 6], "order": [1, 6], "reduc": [1, 6], "memori": [1, 6], "footprint": [1, 6], "store": [1, 6], "data": [1, 2, 3, 4, 6], "thu": [1, 6], "fetch": [1, 6], "slower": [1, 6], "than": [1, 6], "chol_i": [2, 3, 4, 5], "chol_ystar": [2, 3, 4, 5], "cov_y_ystar": [2, 3, 4, 5], "nboot": [2, 4], "100": [2, 3, 4, 6], "alpha": [2, 3, 4], "05": [2, 4], "full_refit": [2, 3], "use_trace_corr": [2, 3, 4], "cp": [2, 3, 4, 5], "adapt": 2, "linear": [2, 5], "smoother": 2, "mse": [2, 3, 4, 5], "must": 2, "mathbb": 2, "n": [2, 3, 4, 5], "time": 2, "boolean": [2, 3, 4, 5], "index": [2, 3, 4, 5, 6], "which": [2, 3, 4, 5, 6], "sigma_i": [2, 3, 4, 5], "sigma_": [2, 3, 4, 5], "assum": [2, 3, 4, 5], "n_boot": [2, 4], "draw": [2, 4], "averag": [2, 4], "over": [2, 4], "amount": [2, 4], "nois": [2, 3, 4], "elev": [2, 3, 4], "appli": [2, 4, 6], "To": [2, 4], "approxim": [2, 4], "small": [2, 4], "recommend": [2, 4], "refit": [2, 3], "determinist": [2, 3, 4], "trace": [2, 3, 4], "correct": [2, 3, 4], "random": [2, 3, 4], "term": [2, 3, 4], "same": [2, 3, 4], "yield": [2, 3, 4], "smaller": [2, 3, 4], "varianc": [2, 3, 4], "err_est": [2, 3, 4, 5], "bag": [3, 6], "arbitrari": 4, "mallow": 5, "ani": [5, 6], "depend": 5, "type": 5, "criterion": 6, "squared_error": 6, "min_samples_split": 6, "min_samples_leaf": 6, "min_weight_fraction_leaf": 6, "max_leaf_nod": 6, "min_impurity_decreas": 6, "ccp_alpha": 6, "monotonic_cst": 6, "tree": 6, "leaf": 6, "intern": 6, "its": 6, "dtype": 6, "convert": 6, "float32": 6, "csr_matrix": 6, "x_leav": 6, "datapoint": 6, "end": 6, "up": 6, "decision_path": 6, "decis": 6, "path": 6, "18": 6, "n_node": 6, "node": 6, "non": 6, "zero": 6, "element": 6, "goe": 6, "through": 6, "csr": 6, "format": 6, "n_nodes_ptr": 6, "column": 6, "give": 6, "th": 6, "csc_matrix": 6, "split": 6, "child": 6, "net": 6, "while": 6, "search": 6, "also": 6, "result": 6, "singl": 6, "carri": 6, "either": 6, "chol": 6, "check": 6, "metadatarequest": 6, "encapsul": 6, "inform": 6, "feature_importances_": 6, "impur": 6, "import": 6, "higher": 6, "more": 6, "normal": 6, "reduct": 6, "brought": 6, "It": 6, "known": 6, "gini": 6, "warn": 6, "mislead": 6, "high": 6, "cardin": 6, "mani": 6, "uniqu": 6, "inspect": 6, "permutation_import": 6, "altern": 6, "unless": 6, "root": 6}, "objects": {"spe.bagging": [[1, 0, 1, "", "ParametricBaggingRegressor"]], "spe.bagging.ParametricBaggingRegressor": [[1, 1, 1, "", "__init__"], [1, 2, 1, "", "estimators_samples_"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "get_group_X"], [1, 1, 1, "", "get_linear_smoother"], [1, 1, 1, "", "get_metadata_routing"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "predict"], [1, 1, 1, "", "score"], [1, 1, 1, "", "set_fit_request"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "set_predict_request"], [1, 1, 1, "", "set_score_request"]], "spe.estimators": [[2, 3, 1, "", "cp_adaptive_smoother"], [3, 3, 1, "", "cp_bagged"], [4, 3, 1, "", "cp_general"], [5, 3, 1, "", "cp_smoother"]], "spe.forest": [[6, 0, 1, "", "ParametricRandomForestRegressor"]], "spe.forest.ParametricRandomForestRegressor": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "apply"], [6, 1, 1, "", "decision_path"], [6, 2, 1, "", "estimators_samples_"], [6, 2, 1, "", "feature_importances_"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "get_group_X"], [6, 1, 1, "", "get_linear_smoother"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "predict"], [6, 1, 1, "", "score"], [6, 1, 1, "", "set_fit_request"], [6, 1, 1, "", "set_params"], [6, 1, 1, "", "set_score_request"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "spe": [0, 1, 2, 3, 4, 5, 6, 7], "bag": [0, 1], "estim": [0, 2, 3, 4, 5], "forest": [0, 6], "parametricbaggingregressor": 1, "cp_adaptive_smooth": 2, "cp_bag": 3, "cp_gener": 4, "cp_smoother": 5, "parametricrandomforestregressor": 6, "document": 7, "user": 8, "guid": 8}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "spe.bagging": [[0, "spe-bagging"]], "spe.estimators": [[0, "spe-estimators"]], "spe.forest": [[0, "spe-forest"]], "spe.bagging.ParametricBaggingRegressor": [[1, "spe-bagging-parametricbaggingregressor"]], "spe.estimators.cp_adaptive_smoother": [[2, "spe-estimators-cp-adaptive-smoother"]], "spe.estimators.cp_bagged": [[3, "spe-estimators-cp-bagged"]], "spe.estimators.cp_general": [[4, "spe-estimators-cp-general"]], "spe.estimators.cp_smoother": [[5, "spe-estimators-cp-smoother"]], "spe.forest.ParametricRandomForestRegressor": [[6, "spe-forest-parametricrandomforestregressor"]], "SPE Documentation": [[7, "spe-documentation"]], "User Guide": [[8, "user-guide"]]}, "indexentries": {"parametricbaggingregressor (class in spe.bagging)": [[1, "spe.bagging.ParametricBaggingRegressor"]], "__init__() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.__init__"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor attribute)": [[1, "spe.bagging.ParametricBaggingRegressor.estimators_samples_"]], "fit() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.fit"]], "get_group_x() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_group_X"]], "get_linear_smoother() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_metadata_routing"]], "get_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_params"]], "predict() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.predict"]], "score() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.score"]], "set_fit_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_fit_request"]], "set_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_params"]], "set_predict_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_predict_request"]], "set_score_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_score_request"]], "cp_adaptive_smoother() (in module spe.estimators)": [[2, "spe.estimators.cp_adaptive_smoother"]], "cp_bagged() (in module spe.estimators)": [[3, "spe.estimators.cp_bagged"]], "cp_general() (in module spe.estimators)": [[4, "spe.estimators.cp_general"]], "cp_smoother() (in module spe.estimators)": [[5, "spe.estimators.cp_smoother"]], "parametricrandomforestregressor (class in spe.forest)": [[6, "spe.forest.ParametricRandomForestRegressor"]], "__init__() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.__init__"]], "apply() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.apply"]], "decision_path() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.decision_path"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.estimators_samples_"]], "feature_importances_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.feature_importances_"]], "fit() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.fit"]], "get_group_x() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_group_X"]], "get_linear_smoother() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_metadata_routing"]], "get_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_params"]], "predict() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.predict"]], "score() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.score"]], "set_fit_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_fit_request"]], "set_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_params"]], "set_score_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_score_request"]]}})