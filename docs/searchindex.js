Search.setIndex({"docnames": ["api_reference", "generated/spe.bagging.ParametricBaggingRegressor", "generated/spe.estimators.cp_adaptive_smoother", "generated/spe.estimators.cp_bagged", "generated/spe.estimators.cp_general", "generated/spe.estimators.cp_smoother", "generated/spe.forest.ParametricRandomForestRegressor", "generated/spe.relaxed_lasso.RelaxedLasso", "generated/spe.smoothers.BSplineRegressor", "generated/spe.smoothers.LinearRegression", "index", "notebooks/quickstart", "user_guide"], "filenames": ["api_reference.rst", "generated/spe.bagging.ParametricBaggingRegressor.rst", "generated/spe.estimators.cp_adaptive_smoother.rst", "generated/spe.estimators.cp_bagged.rst", "generated/spe.estimators.cp_general.rst", "generated/spe.estimators.cp_smoother.rst", "generated/spe.forest.ParametricRandomForestRegressor.rst", "generated/spe.relaxed_lasso.RelaxedLasso.rst", "generated/spe.smoothers.BSplineRegressor.rst", "generated/spe.smoothers.LinearRegression.rst", "index.rst", "notebooks/quickstart.ipynb", "user_guide.rst"], "titles": ["API Reference", "spe.bagging.ParametricBaggingRegressor", "spe.estimators.cp_adaptive_smoother", "spe.estimators.cp_bagged", "spe.estimators.cp_general", "spe.estimators.cp_smoother", "spe.forest.ParametricRandomForestRegressor", "spe.relaxed_lasso.RelaxedLasso", "spe.smoothers.BSplineRegressor", "spe.smoothers.LinearRegression", "SPE Documentation", "Quickstart Guide", "User Guide"], "terms": {"class": [1, 6, 7, 8, 9], "estim": [1, 6, 7, 8, 9, 12], "none": [1, 2, 3, 4, 5, 6, 7, 8, 9], "n_estim": [1, 3, 6], "10": [1, 11], "max_sampl": [1, 6], "1": [1, 6, 7, 8, 9, 11], "0": [1, 2, 3, 4, 5, 6, 7, 9, 11], "max_featur": [1, 6], "bootstrap": [1, 2, 3, 4, 6], "true": [1, 2, 3, 4, 6, 7, 8, 9], "bootstrap_featur": 1, "fals": [1, 2, 3, 4, 6, 7, 8, 9, 11], "oob_scor": [1, 6], "warm_start": [1, 6, 7], "n_job": [1, 6, 9], "random_st": [1, 6, 7], "verbos": [1, 6], "method": [1, 6, 7, 8, 9], "attribut": [1, 6], "__init__": [1, 6, 7, 8, 9], "fit": [1, 3, 6, 7, 8, 9], "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "y": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12], "max_depth": [1, 6, 11], "sample_weight": [1, 6, 7, 9], "check_input": [1, 7], "chol_ep": [1, 6], "do_param_boot": [1, 6], "build": [1, 6], "ensembl": [1, 6], "from": [1, 6, 8, 9, 11], "train": [1, 2, 3, 4, 5, 6, 8, 9], "set": [1, 2, 3, 4, 5, 6, 7, 8, 9], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "arrai": [1, 2, 3, 4, 5, 6, 7, 8, 9], "like": [1, 2, 3, 4, 5, 6, 7, 8, 9], "spars": [1, 6, 7, 8, 9], "matrix": [1, 2, 3, 4, 5, 6, 7, 8, 9], "shape": [1, 2, 3, 4, 5, 6, 7, 8, 9], "n_sampl": [1, 2, 3, 4, 5, 6, 9], "n_featur": [1, 2, 3, 4, 5, 6, 7, 8, 9], "The": [1, 2, 3, 4, 6, 7, 8, 9], "input": [1, 6, 7, 8, 9], "sampl": [1, 2, 3, 4, 5, 6, 9], "matric": 1, "ar": [1, 2, 3, 6, 7, 8, 9], "accept": 1, "onli": [1, 6, 7, 8, 9], "thei": [1, 6, 8], "support": [1, 9], "base": [1, 3, 6], "target": [1, 6, 9], "valu": [1, 2, 4, 6, 7, 8, 9], "label": [1, 6], "classif": [1, 6], "real": [1, 6], "number": [1, 2, 3, 4, 6, 7, 8, 9, 11], "regress": [1, 6, 7, 8], "int": [1, 2, 3, 4, 7, 8, 11], "float": [1, 2, 3, 4, 5, 6, 7, 9], "default": [1, 2, 3, 4, 5, 6, 7, 8, 9], "argument": [1, 7], "us": [1, 2, 3, 4, 6, 7, 8, 9, 11], "instead": [1, 6, 7, 9], "self": [1, 6, 7, 8, 9], "overrid": 1, "when": [1, 6, 7, 9], "construct": 1, "ha": [1, 6, 7, 9], "weight": [1, 6, 9], "If": [1, 2, 3, 4, 6, 7, 8, 9], "equal": [1, 6, 8], "note": [1, 6, 7, 8, 9], "thi": [1, 6, 7, 8, 9], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9], "bool": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "function": [1, 7, 8], "option": [1, 2, 3, 4, 5, 6, 7, 8, 9], "choleski": [1, 2, 3, 4, 5, 6, 11], "parametr": [1, 6], "covari": [1, 2, 3, 4, 5, 6], "In": [1, 6, 8], "case": [1, 2, 3, 4, 5, 6, 8], "ignor": [1, 6, 7, 8, 9], "np": [1, 2, 3, 4, 5, 6, 11], "ey": [1, 2, 3, 4, 5, 6, 11], "perform": [1, 2, 4, 6], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9], "object": [1, 2, 3, 4, 5, 6, 7, 8, 9], "get_group_x": [1, 6, 7, 8, 9], "x_pred": [1, 8, 9], "get_linear_smooth": [1, 6, 7, 8, 9], "tr_idx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "ts_idx": [1, 6, 7, 8, 9], "ret_full_p": [1, 6, 7, 8, 9], "get_metadata_rout": [1, 6, 7, 8, 9], "rais": [1, 6, 7, 8, 9], "notimplementederror": 1, "doe": 1, "metadata": [1, 6, 7, 8, 9], "rout": [1, 6, 7, 8, 9], "yet": 1, "get_param": [1, 6, 7, 8, 9], "deep": [1, 6, 7, 8, 9], "get": [1, 6, 7, 8, 9], "contain": [1, 6, 7, 8, 9], "subobject": [1, 6, 7, 8, 9], "param": [1, 6, 7, 8, 9], "dict": [1, 6, 7, 8, 9], "name": [1, 6, 7, 8, 9], "map": [1, 6, 7, 8, 9], "predict": [1, 2, 3, 6, 7, 8, 9], "y_refit": [1, 7, 9], "an": [1, 2, 3, 4, 6, 7, 8, 9], "comput": [1, 2, 3, 4, 5, 6, 8], "mean": [1, 6, 9], "ndarrai": [1, 6], "score": [1, 6, 9], "coeffici": [1, 6, 7, 9], "determin": [1, 6, 9], "r": [1, 2, 6, 9], "2": [1, 6, 8, 9, 11], "defin": [1, 6, 9], "frac": [1, 6, 9], "u": [1, 6, 9], "v": [1, 6, 9], "where": [1, 2, 6, 9], "residu": [1, 6, 9], "sum": [1, 6, 8, 9], "squar": [1, 6, 9], "y_true": [1, 6, 9], "y_pred": [1, 6, 9], "total": [1, 6, 9], "best": [1, 6, 9], "possibl": [1, 6, 7, 8, 9], "can": [1, 6, 7, 9], "neg": [1, 6, 7, 8, 9], "becaus": [1, 6, 9], "model": [1, 2, 3, 4, 5, 6, 7, 8, 9], "arbitrarili": [1, 6, 9], "wors": [1, 6, 9], "A": [1, 6, 7, 8, 9], "constant": [1, 6, 7, 8, 9], "alwai": [1, 6, 7, 9], "expect": [1, 2, 3, 4, 6, 7, 9], "disregard": [1, 6, 9], "featur": [1, 6, 7, 8, 9], "would": [1, 6, 9], "test": [1, 5, 6, 9], "For": [1, 6, 7, 8, 9], "some": [1, 6, 7, 9], "mai": [1, 6, 7, 8, 9], "precomput": [1, 6, 7, 9], "kernel": [1, 6, 9, 11], "list": [1, 6, 9], "gener": [1, 2, 3, 4, 6, 7, 8, 9, 12], "n_samples_fit": [1, 6, 9], "n_output": [1, 6, 9], "w": [1, 2, 3, 6, 9], "t": [1, 6, 9, 11], "call": [1, 6, 7, 9], "regressor": [1, 6, 9], "multioutput": [1, 6, 9], "uniform_averag": [1, 6, 9], "version": [1, 6, 7, 9], "23": [1, 6, 9], "keep": [1, 6, 9], "consist": [1, 6, 9], "r2_score": [1, 6, 9], "influenc": [1, 6, 9], "all": [1, 6, 9], "except": [1, 6, 9], "multioutputregressor": [1, 6, 9], "set_fit_request": [1, 6, 7, 9], "str": [1, 6, 7, 9], "unchang": [1, 6, 7, 9], "request": [1, 6, 7, 9], "pass": [1, 6, 7, 9], "relev": [1, 6, 7, 9], "enable_metadata_rout": [1, 6, 7, 9], "see": [1, 6, 7, 9], "sklearn": [1, 6, 7, 9, 11], "set_config": [1, 6, 7, 9], "pleas": [1, 6, 7, 8, 9], "user": [1, 6, 7, 8, 9], "guid": [1, 6, 7, 8, 9], "how": [1, 6, 7, 8, 9], "mechan": [1, 6, 7, 8, 9], "work": [1, 6, 7, 8, 9], "each": [1, 6, 7, 8, 9], "provid": [1, 6, 7, 9], "meta": [1, 6, 7, 9], "error": [1, 6, 7, 8, 9], "should": [1, 6, 7, 9], "given": [1, 6, 7, 8, 9], "alia": [1, 6, 7, 9], "origin": [1, 2, 3, 4, 6, 7, 9], "util": [1, 6, 7, 9], "metadata_rout": [1, 6, 7, 9], "retain": [1, 6, 7, 9], "exist": [1, 6, 7, 9], "allow": [1, 6, 7, 9], "you": [1, 6, 7, 9], "chang": [1, 6, 7, 9], "other": [1, 6, 7, 9], "new": [1, 6, 7, 9], "3": [1, 6, 7, 8, 9, 11], "sub": [1, 6, 7, 9], "e": [1, 2, 3, 6, 7, 8, 9], "g": [1, 6, 7, 9], "insid": [1, 6, 7, 8, 9], "pipelin": [1, 6, 7, 8, 9], "otherwis": [1, 6, 7, 9], "effect": [1, 6, 7, 9], "updat": [1, 6, 7, 8, 9], "set_param": [1, 6, 7, 8, 9], "simpl": [1, 6, 7, 8, 9], "well": [1, 6, 7, 8, 9], "nest": [1, 6, 7, 8, 9], "latter": [1, 6, 7, 8, 9], "have": [1, 2, 6, 7, 8, 9], "form": [1, 2, 6, 7, 8, 9], "compon": [1, 6, 7, 8, 9], "__": [1, 6, 7, 8, 9], "so": [1, 6, 7, 8, 9], "": [1, 2, 3, 5, 6, 7, 8, 9, 11], "instanc": [1, 6, 7, 8, 9], "set_predict_request": [1, 7, 9], "set_score_request": [1, 6, 9], "estimators_samples_": [1, 6], "subset": [1, 6], "drawn": [1, 6], "dynam": [1, 6], "indic": [1, 6], "identifi": [1, 6], "member": [1, 6], "re": [1, 6], "creat": [1, 6], "properti": [1, 6], "order": [1, 6, 8], "reduc": [1, 6], "memori": [1, 6], "footprint": [1, 6], "store": [1, 6], "data": [1, 2, 3, 4, 6, 7, 8, 9, 12], "thu": [1, 6], "fetch": [1, 6], "slower": [1, 6], "than": [1, 6, 7], "chol_i": [2, 3, 4, 5, 11], "chol_ystar": [2, 3, 4, 5], "cov_y_ystar": [2, 3, 4, 5, 11], "nboot": [2, 4], "100": [2, 3, 4, 6, 11], "alpha": [2, 3, 4, 11], "05": [2, 4, 11], "full_refit": [2, 3], "use_trace_corr": [2, 3, 4, 11], "cp": [2, 3, 4, 5], "adapt": 2, "linear": [2, 5, 7, 8, 9], "smoother": 2, "mse": [2, 3, 4, 5, 12], "must": [2, 7, 8], "mathbb": 2, "n": [2, 3, 4, 5, 12], "time": 2, "boolean": [2, 3, 4, 5], "index": [2, 3, 4, 5, 6], "which": [2, 3, 4, 5, 6], "sigma_i": [2, 3, 4, 5, 12], "sigma_": [2, 3, 4, 5, 12], "assum": [2, 3, 4, 5], "n_boot": [2, 4], "draw": [2, 4], "averag": [2, 4], "over": [2, 4, 7, 8], "amount": [2, 4], "nois": [2, 3, 4], "elev": [2, 3, 4], "appli": [2, 4, 6], "To": [2, 4], "approxim": [2, 4], "small": [2, 4], "recommend": [2, 4, 8], "refit": [2, 3, 7], "determinist": [2, 3, 4], "trace": [2, 3, 4], "correct": [2, 3, 4], "random": [2, 3, 4, 7, 11], "term": [2, 3, 4, 7, 8], "same": [2, 3, 4, 8], "yield": [2, 3, 4], "smaller": [2, 3, 4, 7], "varianc": [2, 3, 4], "err_est": [2, 3, 4, 5], "bag": [3, 6], "arbitrari": [4, 8], "mallow": 5, "ani": [5, 6], "depend": 5, "type": 5, "criterion": 6, "squared_error": 6, "min_samples_split": 6, "min_samples_leaf": 6, "min_weight_fraction_leaf": 6, "max_leaf_nod": 6, "min_impurity_decreas": 6, "ccp_alpha": 6, "monotonic_cst": 6, "tree": [6, 11], "leaf": 6, "intern": [6, 8], "its": 6, "dtype": [6, 9, 11], "convert": 6, "float32": 6, "csr_matrix": 6, "x_leav": 6, "datapoint": 6, "end": [6, 12], "up": [6, 7], "decision_path": 6, "decis": [6, 11], "path": 6, "18": 6, "n_node": 6, "node": 6, "non": [6, 7, 8], "zero": [6, 11], "element": [6, 8], "goe": 6, "through": 6, "csr": [6, 8], "format": 6, "n_nodes_ptr": 6, "column": [6, 8], "give": 6, "th": 6, "csc_matrix": 6, "split": 6, "child": 6, "net": 6, "while": 6, "search": 6, "also": [6, 7], "result": 6, "singl": 6, "carri": 6, "either": 6, "chol": 6, "check": [6, 7, 8, 9], "metadatarequest": [6, 7, 8, 9], "encapsul": [6, 7, 8, 9], "inform": [6, 7, 8, 9], "feature_importances_": 6, "impur": 6, "import": [6, 11], "higher": [6, 7], "more": 6, "normal": 6, "reduct": 6, "brought": 6, "It": [6, 8], "known": 6, "gini": 6, "warn": 6, "mislead": 6, "high": 6, "cardin": 6, "mani": 6, "uniqu": 6, "inspect": 6, "permutation_import": 6, "altern": 6, "unless": 6, "root": 6, "lambd": 7, "fit_intercept": [7, 9], "copy_x": [7, 9], "max_it": 7, "1000": 7, "tol": 7, "0001": 7, "posit": [7, 8, 9], "select": 7, "cyclic": 7, "relax": 7, "lasso": 7, "usual": 7, "unpen": 7, "multipli": 7, "l1": 7, "control": [7, 8], "regular": 7, "strength": 7, "inf": 7, "whether": 7, "calcul": 7, "intercept": [7, 8], "center": 7, "gram": 7, "speed": 7, "preserv": 7, "sparsiti": 7, "copi": 7, "els": [7, 8, 11], "overwritten": 7, "maximum": [7, 8], "iter": 7, "toler": 7, "optim": 7, "code": 7, "dual": 7, "gap": 7, "continu": [7, 8], "until": 7, "1e": 7, "4": [7, 11], "reus": 7, "solut": 7, "previou": 7, "initi": 7, "just": 7, "eras": 7, "forc": 7, "seed": 7, "pseudo": 7, "reproduc": 7, "output": [7, 8], "across": 7, "multipl": 7, "everi": 7, "rather": 7, "loop": 7, "sequenti": 7, "often": 7, "lead": 7, "significantli": 7, "faster": [7, 8], "converg": 7, "especi": 7, "lasso_i": 7, "lin_i": 7, "fit_linear": 7, "n_knot": 8, "5": [8, 11], "degre": 8, "knot": 8, "uniform": [8, 11], "extrapol": 8, "include_bia": 8, "c": [8, 9], "sparse_output": 8, "bspline": 8, "b": 8, "spline": 8, "expand": 8, "one": 8, "quantil": 8, "larger": 8, "polynomi": 8, "basi": 8, "integ": 8, "first": 8, "last": 8, "distribut": 8, "uniformli": 8, "min": 8, "max": 8, "along": 8, "directli": 8, "specifi": 8, "sort": 8, "includ": 8, "boundari": 8, "ad": 8, "befor": 8, "after": 8, "period": 8, "outsid": 8, "valueerror": 8, "minimum": 8, "scipi": 8, "interpol": 8, "distanc": 8, "between": 8, "enforc": 8, "deriv": 8, "exampl": 8, "make": 8, "avoid": 8, "introduc": 8, "jump": 8, "dec": 8, "31st": 8, "jan": 8, "1st": 8, "natur": 8, "dai": 8, "year": 8, "manual": 8, "rang": 8, "drop": 8, "As": 8, "point": 8, "implicitli": 8, "bia": 8, "ones": [8, 11], "act": 8, "f": 8, "dens": 8, "slow": 8, "down": 8, "subsequ": 8, "Will": [8, 9], "avail": 8, "8": [8, 11], "n_target": 9, "cast": 9, "necessari": 9, "individu": 9, "17": 9, "numpi": 11, "gaussian_process": 11, "matern": 11, "rbf": 11, "decisiontreeregressor": 11, "doc": 11, "plotting_util": 11, "gen_model_barplot": 11, "data_gener": 11, "gen_cov_mat": 11, "gen_rbf_x": 11, "gen_matern_x": 11, "spe": 11, "cp_gener": 11, "here": 11, "we": 11, "show": 11, "basic": 11, "realiz": 11, "run": 11, "niter": 11, "gsize": 11, "p": 11, "30": 11, "delta": 11, "75": 11, "snr": 11, "noise_kernel": 11, "noise_length_scal": 11, "noise_nu": 11, "x_kernel": 11, "x_length_scal": 11, "x_nu": 11, "plot": 11, "model_nam": 11, "est_nam": 11, "gencp": 11, "kfcv": 11, "spcv": 11, "nx": 11, "ny": 11, "sqrt": 11, "linspac": 11, "c_x": 11, "c_y": 11, "meshgrid": 11, "flatten": 11, "coord": 11, "stack": 11, "sigma_t": 11, "length_scal": 11, "elif": 11, "nu": 11, "linalg": 11, "6": 11, "randn": 11, "beta": 11, "idx": 11, "choic": 11, "size": 11, "replac": 11, "7": 11, "ind_est": 11, "337245935587206": 11, "9": 11, "corr_est": 11, "5807589441798799": 11, "quickstart": 12, "toi": 12, "overset": 12, "iid": 12, "sim": 12, "mathcal": 12, "mu": 12, "begin": 12, "pmatrix": 12, "left": 12, "right": 12}, "objects": {"spe.bagging": [[1, 0, 1, "", "ParametricBaggingRegressor"]], "spe.bagging.ParametricBaggingRegressor": [[1, 1, 1, "", "__init__"], [1, 2, 1, "", "estimators_samples_"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "get_group_X"], [1, 1, 1, "", "get_linear_smoother"], [1, 1, 1, "", "get_metadata_routing"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "predict"], [1, 1, 1, "", "score"], [1, 1, 1, "", "set_fit_request"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "set_predict_request"], [1, 1, 1, "", "set_score_request"]], "spe.estimators": [[2, 3, 1, "", "cp_adaptive_smoother"], [3, 3, 1, "", "cp_bagged"], [4, 3, 1, "", "cp_general"], [5, 3, 1, "", "cp_smoother"]], "spe.forest": [[6, 0, 1, "", "ParametricRandomForestRegressor"]], "spe.forest.ParametricRandomForestRegressor": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "apply"], [6, 1, 1, "", "decision_path"], [6, 2, 1, "", "estimators_samples_"], [6, 2, 1, "", "feature_importances_"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "get_group_X"], [6, 1, 1, "", "get_linear_smoother"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "predict"], [6, 1, 1, "", "score"], [6, 1, 1, "", "set_fit_request"], [6, 1, 1, "", "set_params"], [6, 1, 1, "", "set_score_request"]], "spe.relaxed_lasso": [[7, 0, 1, "", "RelaxedLasso"]], "spe.relaxed_lasso.RelaxedLasso": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_linear"], [7, 1, 1, "", "get_group_X"], [7, 1, 1, "", "get_linear_smoother"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "set_fit_request"], [7, 1, 1, "", "set_params"], [7, 1, 1, "", "set_predict_request"]], "spe.smoothers": [[8, 0, 1, "", "BSplineRegressor"], [9, 0, 1, "", "LinearRegression"]], "spe.smoothers.BSplineRegressor": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "get_group_X"], [8, 1, 1, "", "get_linear_smoother"], [8, 1, 1, "", "get_metadata_routing"], [8, 1, 1, "", "get_params"], [8, 1, 1, "", "predict"], [8, 1, 1, "", "set_params"]], "spe.smoothers.LinearRegression": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "fit"], [9, 1, 1, "", "get_group_X"], [9, 1, 1, "", "get_linear_smoother"], [9, 1, 1, "", "get_metadata_routing"], [9, 1, 1, "", "get_params"], [9, 1, 1, "", "predict"], [9, 1, 1, "", "score"], [9, 1, 1, "", "set_fit_request"], [9, 1, 1, "", "set_params"], [9, 1, 1, "", "set_predict_request"], [9, 1, 1, "", "set_score_request"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "spe": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "bag": [0, 1], "estim": [0, 2, 3, 4, 5, 11], "forest": [0, 6], "relaxed_lasso": [0, 7], "smoother": [0, 8, 9], "parametricbaggingregressor": 1, "cp_adaptive_smooth": 2, "cp_bag": 3, "cp_gener": 4, "cp_smoother": 5, "parametricrandomforestregressor": 6, "relaxedlasso": 7, "bsplineregressor": 8, "linearregress": 9, "document": 10, "quickstart": 11, "guid": [11, 12], "gener": 11, "toi": 11, "data": 11, "mse": 11, "y": 11, "overset": 11, "iid": 11, "sim": 11, "mathcal": 11, "n": 11, "mu": 11, "sigma_i": 11, "begin": 11, "pmatrix": 11, "end": 11, "left": 11, "sigma_": 11, "right": 11, "user": 12}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "spe.bagging": [[0, "spe-bagging"]], "spe.estimators": [[0, "spe-estimators"]], "spe.forest": [[0, "spe-forest"]], "spe.relaxed_lasso": [[0, "spe-relaxed-lasso"]], "spe.smoothers": [[0, "spe-smoothers"]], "spe.bagging.ParametricBaggingRegressor": [[1, "spe-bagging-parametricbaggingregressor"]], "spe.estimators.cp_adaptive_smoother": [[2, "spe-estimators-cp-adaptive-smoother"]], "spe.estimators.cp_bagged": [[3, "spe-estimators-cp-bagged"]], "spe.estimators.cp_general": [[4, "spe-estimators-cp-general"]], "spe.estimators.cp_smoother": [[5, "spe-estimators-cp-smoother"]], "spe.forest.ParametricRandomForestRegressor": [[6, "spe-forest-parametricrandomforestregressor"]], "spe.relaxed_lasso.RelaxedLasso": [[7, "spe-relaxed-lasso-relaxedlasso"]], "spe.smoothers.BSplineRegressor": [[8, "spe-smoothers-bsplineregressor"]], "spe.smoothers.LinearRegression": [[9, "spe-smoothers-linearregression"]], "SPE Documentation": [[10, "spe-documentation"]], "Quickstart Guide": [[11, "Quickstart-Guide"]], "Generate toy data": [[11, "Generate-toy-data"]], "Estimate MSE for Y, Y^* \\overset{iid}{\\sim} \\mathcal{N}(\\mu, \\Sigma_Y)": [[11, "Estimate-MSE-for-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"]], "Estimate MSE for \\begin{pmatrix} Y \\\\ Y^* \\end{pmatrix} \\sim \\mathcal{N}\\left(\\begin{pmatrix} \\mu \\\\ \\mu \\end{pmatrix}, \\begin{pmatrix}\\Sigma_Y & \\Sigma_{Y, Y^*} \\\\ \\Sigma_{Y^*, Y} & \\Sigma_{Y} \\end{pmatrix}\\right)": [[11, "Estimate-MSE-for-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"]], "User Guide": [[12, "user-guide"]]}, "indexentries": {"parametricbaggingregressor (class in spe.bagging)": [[1, "spe.bagging.ParametricBaggingRegressor"]], "__init__() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.__init__"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor attribute)": [[1, "spe.bagging.ParametricBaggingRegressor.estimators_samples_"]], "fit() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.fit"]], "get_group_x() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_group_X"]], "get_linear_smoother() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_metadata_routing"]], "get_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_params"]], "predict() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.predict"]], "score() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.score"]], "set_fit_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_fit_request"]], "set_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_params"]], "set_predict_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_predict_request"]], "set_score_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_score_request"]], "cp_adaptive_smoother() (in module spe.estimators)": [[2, "spe.estimators.cp_adaptive_smoother"]], "cp_bagged() (in module spe.estimators)": [[3, "spe.estimators.cp_bagged"]], "cp_general() (in module spe.estimators)": [[4, "spe.estimators.cp_general"]], "cp_smoother() (in module spe.estimators)": [[5, "spe.estimators.cp_smoother"]], "parametricrandomforestregressor (class in spe.forest)": [[6, "spe.forest.ParametricRandomForestRegressor"]], "__init__() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.__init__"]], "apply() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.apply"]], "decision_path() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.decision_path"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.estimators_samples_"]], "feature_importances_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.feature_importances_"]], "fit() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.fit"]], "get_group_x() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_group_X"]], "get_linear_smoother() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_metadata_routing"]], "get_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_params"]], "predict() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.predict"]], "score() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.score"]], "set_fit_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_fit_request"]], "set_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_params"]], "set_score_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_score_request"]], "relaxedlasso (class in spe.relaxed_lasso)": [[7, "spe.relaxed_lasso.RelaxedLasso"]], "__init__() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.__init__"]], "fit() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit"]], "fit_linear() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit_linear"]], "get_group_x() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_group_X"]], "get_linear_smoother() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_linear_smoother"]], "get_metadata_routing() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_metadata_routing"]], "get_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_params"]], "predict() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.predict"]], "set_fit_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_fit_request"]], "set_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_params"]], "set_predict_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_predict_request"]], "bsplineregressor (class in spe.smoothers)": [[8, "spe.smoothers.BSplineRegressor"]], "__init__() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.__init__"]], "fit() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.fit"]], "get_group_x() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_group_X"]], "get_linear_smoother() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_metadata_routing"]], "get_params() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_params"]], "predict() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.predict"]], "set_params() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.set_params"]], "linearregression (class in spe.smoothers)": [[9, "spe.smoothers.LinearRegression"]], "__init__() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.__init__"]], "fit() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.fit"]], "get_group_x() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_group_X"]], "get_linear_smoother() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_linear_smoother"]], "get_metadata_routing() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_metadata_routing"]], "get_params() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_params"]], "predict() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.predict"]], "score() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.score"]], "set_fit_request() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_fit_request"]], "set_params() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_params"]], "set_predict_request() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_predict_request"]], "set_score_request() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_score_request"]]}})