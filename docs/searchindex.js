Search.setIndex({"docnames": ["api_reference", "generated/spe.bagging.ParametricBaggingRegressor", "generated/spe.estimators.cp_adaptive_smoother", "generated/spe.estimators.cp_arbitrary", "generated/spe.estimators.cp_bagged", "generated/spe.estimators.cp_smoother", "generated/spe.forest.ParametricRandomForestRegressor", "generated/spe.relaxed_lasso.RelaxedLasso", "generated/spe.smoothers.BSplineRegressor", "generated/spe.smoothers.LinearRegression", "index", "notebooks/adaptive_linear", "notebooks/arbitrary", "notebooks/bagging", "notebooks/by_comps", "notebooks/est_vs_oracle_cov", "notebooks/linear", "notebooks/quickstart", "notebooks/rand_vs_trace", "notebooks/rf_comps", "user_guide"], "filenames": ["api_reference.rst", "generated/spe.bagging.ParametricBaggingRegressor.rst", "generated/spe.estimators.cp_adaptive_smoother.rst", "generated/spe.estimators.cp_arbitrary.rst", "generated/spe.estimators.cp_bagged.rst", "generated/spe.estimators.cp_smoother.rst", "generated/spe.forest.ParametricRandomForestRegressor.rst", "generated/spe.relaxed_lasso.RelaxedLasso.rst", "generated/spe.smoothers.BSplineRegressor.rst", "generated/spe.smoothers.LinearRegression.rst", "index.rst", "notebooks/adaptive_linear.ipynb", "notebooks/arbitrary.ipynb", "notebooks/bagging.ipynb", "notebooks/by_comps.ipynb", "notebooks/est_vs_oracle_cov.ipynb", "notebooks/linear.ipynb", "notebooks/quickstart.ipynb", "notebooks/rand_vs_trace.ipynb", "notebooks/rf_comps.ipynb", "user_guide.rst"], "titles": ["API Reference", "spe.bagging.ParametricBaggingRegressor", "spe.estimators.cp_adaptive_smoother", "spe.estimators.cp_arbitrary", "spe.estimators.cp_bagged", "spe.estimators.cp_smoother", "spe.forest.ParametricRandomForestRegressor", "spe.relaxed_lasso.RelaxedLasso", "spe.smoothers.BSplineRegressor", "spe.smoothers.LinearRegression", "SPE Documentation", "Adaptive Linear Smoothers", "Arbitrary Models", "Bagged Models", "Generalized BY Comparison", "Estimated vs Oracle Covariance", "Linear Smoothers", "Quickstart", "Trace Correction vs Random Correction", "Random Forest Comparisons", "User Guide"], "terms": {"class": [1, 6, 7, 8, 9], "estim": [1, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20], "none": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19], "n_estim": [1, 4, 6, 15], "10": [1, 11, 12, 13, 14, 15, 16, 17, 18, 19], "max_sampl": [1, 6], "1": [1, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "0": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19], "max_featur": [1, 6, 13, 14, 19], "bootstrap": [1, 2, 3, 4, 6], "true": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 18, 19], "bootstrap_featur": 1, "fals": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "oob_scor": [1, 6], "warm_start": [1, 6, 7], "n_job": [1, 6, 9], "random_st": [1, 6, 7], "verbos": [1, 6], "method": [1, 6, 7, 8, 9], "attribut": [1, 6], "__init__": [1, 6, 7, 8, 9], "fit": [1, 4, 6, 7, 8, 9], "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "y": [1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 19], "max_depth": [1, 6, 11, 13, 14, 15, 17, 19], "sample_weight": [1, 6, 7, 9], "check_input": [1, 7], "chol_ep": [1, 6], "do_param_boot": [1, 6], "build": [1, 6], "ensembl": [1, 6, 15, 19], "from": [1, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "train": [1, 2, 3, 4, 5, 6, 8, 9, 13, 19], "set": [1, 2, 3, 4, 5, 6, 7, 8, 9], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "arrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 17], "like": [1, 2, 3, 4, 5, 6, 7, 8, 9], "spars": [1, 6, 7, 8, 9], "matrix": [1, 2, 3, 4, 5, 6, 7, 8, 9, 15], "shape": [1, 2, 3, 4, 5, 6, 7, 8, 9], "n_sampl": [1, 2, 3, 4, 5, 6, 9], "n_featur": [1, 2, 3, 4, 5, 6, 7, 8, 9], "The": [1, 2, 3, 4, 6, 7, 8, 9], "input": [1, 6, 7, 8, 9], "sampl": [1, 2, 3, 4, 5, 6, 9], "matric": 1, "ar": [1, 2, 4, 6, 7, 8, 9], "accept": 1, "onli": [1, 6, 7, 8, 9], "thei": [1, 6, 8], "support": [1, 9], "base": [1, 4, 6, 15], "target": [1, 6, 9], "valu": [1, 2, 3, 6, 7, 8, 9], "label": [1, 6], "classif": [1, 6], "real": [1, 6], "number": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "regress": [1, 6, 7, 8, 16], "int": [1, 2, 3, 4, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19], "float": [1, 2, 3, 4, 5, 6, 7, 9], "default": [1, 2, 3, 4, 5, 6, 7, 8, 9], "argument": [1, 7], "us": [1, 2, 3, 4, 6, 7, 8, 9, 17, 18], "instead": [1, 6, 7, 9], "self": [1, 6, 7, 8, 9], "overrid": 1, "when": [1, 6, 7, 9], "construct": 1, "ha": [1, 6, 7, 9], "weight": [1, 6, 9], "If": [1, 2, 3, 4, 6, 7, 8, 9], "equal": [1, 6, 8], "note": [1, 6, 7, 8, 9], "thi": [1, 6, 7, 8, 9], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 18, 19], "bool": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "function": [1, 7, 8], "option": [1, 2, 3, 4, 5, 6, 7, 8, 9], "choleski": [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19], "parametr": [1, 6, 19], "covari": [1, 2, 3, 4, 5, 6, 20], "In": [1, 6, 8], "case": [1, 2, 3, 4, 5, 6, 8], "ignor": [1, 6, 7, 8, 9], "np": [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19], "ey": [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19], "perform": [1, 2, 3, 6, 15], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9], "object": [1, 2, 3, 4, 5, 6, 7, 8, 9], "get_group_x": [1, 6, 7, 8, 9], "x_pred": [1, 8, 9], "get_linear_smooth": [1, 6, 7, 8, 9], "tr_idx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "ts_idx": [1, 6, 7, 8, 9], "ret_full_p": [1, 6, 7, 8, 9], "get_metadata_rout": [1, 6, 7, 8, 9], "rais": [1, 6, 7, 8, 9], "notimplementederror": 1, "doe": 1, "metadata": [1, 6, 7, 8, 9], "rout": [1, 6, 7, 8, 9], "yet": 1, "get_param": [1, 6, 7, 8, 9], "deep": [1, 6, 7, 8, 9], "get": [1, 6, 7, 8, 9], "contain": [1, 6, 7, 8, 9], "subobject": [1, 6, 7, 8, 9], "param": [1, 6, 7, 8, 9], "dict": [1, 6, 7, 8, 9], "name": [1, 6, 7, 8, 9], "map": [1, 6, 7, 8, 9], "predict": [1, 2, 4, 6, 7, 8, 9], "y_refit": [1, 7, 9], "an": [1, 2, 3, 4, 6, 7, 8, 9], "comput": [1, 2, 3, 4, 5, 6, 8], "mean": [1, 6, 9], "ndarrai": [1, 6], "score": [1, 6, 9], "coeffici": [1, 6, 7, 9], "determin": [1, 6, 9], "r": [1, 2, 6, 9], "2": [1, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19], "defin": [1, 6, 9], "frac": [1, 6, 9], "u": [1, 6, 9], "v": [1, 6, 9, 20], "where": [1, 2, 6, 9], "residu": [1, 6, 9], "sum": [1, 6, 8, 9], "squar": [1, 6, 9], "y_true": [1, 6, 9], "y_pred": [1, 6, 9], "total": [1, 6, 9], "best": [1, 6, 9], "possibl": [1, 6, 7, 8, 9], "can": [1, 6, 7, 9], "neg": [1, 6, 7, 8, 9], "becaus": [1, 6, 9], "model": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 16, 18, 19, 20], "arbitrarili": [1, 6, 9], "wors": [1, 6, 9], "A": [1, 6, 7, 8, 9], "constant": [1, 6, 7, 8, 9], "alwai": [1, 6, 7, 9], "expect": [1, 2, 3, 4, 6, 7, 9], "disregard": [1, 6, 9], "featur": [1, 6, 7, 8, 9], "would": [1, 6, 9], "test": [1, 5, 6, 9, 13, 17, 19], "For": [1, 6, 7, 8, 9], "some": [1, 6, 7, 9], "mai": [1, 6, 7, 8, 9], "precomput": [1, 6, 7, 9], "kernel": [1, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "list": [1, 6, 9], "gener": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20], "n_samples_fit": [1, 6, 9], "n_output": [1, 6, 9], "w": [1, 2, 4, 6, 9, 18], "t": [1, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "call": [1, 6, 7, 9], "regressor": [1, 6, 9], "multioutput": [1, 6, 9], "uniform_averag": [1, 6, 9], "version": [1, 6, 7, 9, 14], "23": [1, 6, 9, 15], "keep": [1, 6, 9], "consist": [1, 6, 9], "r2_score": [1, 6, 9], "influenc": [1, 6, 9], "all": [1, 6, 9], "except": [1, 6, 9], "multioutputregressor": [1, 6, 9], "set_fit_request": [1, 6, 7, 9], "str": [1, 6, 7, 9], "unchang": [1, 6, 7, 9], "request": [1, 6, 7, 9], "pass": [1, 6, 7, 9], "relev": [1, 6, 7, 9], "enable_metadata_rout": [1, 6, 7, 9], "see": [1, 6, 7, 9], "sklearn": [1, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "set_config": [1, 6, 7, 9], "pleas": [1, 6, 7, 8, 9], "user": [1, 6, 7, 8, 9], "guid": [1, 6, 7, 8, 9], "how": [1, 6, 7, 8, 9], "mechan": [1, 6, 7, 8, 9], "work": [1, 6, 7, 8, 9], "each": [1, 6, 7, 8, 9], "provid": [1, 6, 7, 9], "meta": [1, 6, 7, 9], "error": [1, 6, 7, 8, 9], "should": [1, 6, 7, 9], "given": [1, 6, 7, 8, 9], "alia": [1, 6, 7, 9], "origin": [1, 2, 3, 4, 6, 7, 9], "util": [1, 6, 7, 9], "metadata_rout": [1, 6, 7, 9], "retain": [1, 6, 7, 9], "exist": [1, 6, 7, 9], "allow": [1, 6, 7, 9], "you": [1, 6, 7, 9], "chang": [1, 6, 7, 9], "other": [1, 6, 7, 9], "new": [1, 6, 7, 9], "3": [1, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "sub": [1, 6, 7, 9], "e": [1, 2, 4, 6, 7, 8, 9], "g": [1, 6, 7, 9], "insid": [1, 6, 7, 8, 9], "pipelin": [1, 6, 7, 8, 9], "otherwis": [1, 6, 7, 9], "effect": [1, 6, 7, 9, 11, 12, 13, 15, 16], "updat": [1, 6, 7, 8, 9], "set_param": [1, 6, 7, 8, 9], "simpl": [1, 6, 7, 8, 9], "well": [1, 6, 7, 8, 9], "nest": [1, 6, 7, 8, 9], "latter": [1, 6, 7, 8, 9], "have": [1, 2, 6, 7, 8, 9], "form": [1, 2, 6, 7, 8, 9], "compon": [1, 6, 7, 8, 9], "__": [1, 6, 7, 8, 9], "so": [1, 6, 7, 8, 9], "": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19], "instanc": [1, 6, 7, 8, 9], "set_predict_request": [1, 7, 9], "set_score_request": [1, 6, 9], "estimators_samples_": [1, 6], "subset": [1, 6], "drawn": [1, 6], "dynam": [1, 6], "indic": [1, 6], "identifi": [1, 6], "member": [1, 6], "re": [1, 6], "creat": [1, 6], "properti": [1, 6], "order": [1, 6, 8], "reduc": [1, 6], "memori": [1, 6], "footprint": [1, 6], "store": [1, 6], "data": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19], "thu": [1, 6], "fetch": [1, 6], "slower": [1, 6], "than": [1, 6, 7], "chol_i": [2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19], "chol_ystar": [2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 18, 19], "cov_y_ystar": [2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19], "nboot": [2, 3, 11, 12, 14, 15, 16, 18], "100": [2, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19], "alpha": [2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 19], "05": [2, 3, 11, 12, 14, 15, 17, 18], "full_refit": [2, 4, 11, 12, 13, 14, 15, 18, 19], "use_trace_corr": [2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 19], "mallow": [2, 3, 4, 5], "cp": [2, 3, 4, 5], "adapt": [2, 20], "linear": [2, 5, 7, 8, 9, 20], "smoother": [2, 20], "mse": [2, 3, 4, 5, 11, 12, 13, 14, 16, 19], "must": [2, 7, 8], "mathbb": 2, "n": [2, 3, 4, 5, 18, 19], "time": 2, "boolean": [2, 3, 4, 5], "index": [2, 3, 4, 5, 6], "which": [2, 3, 4, 5, 6, 19], "sigma_i": [2, 3, 4, 5, 18], "sigma_": [2, 3, 4, 5, 18], "assum": [2, 3, 4, 5], "n_boot": [2, 3], "draw": [2, 3], "averag": [2, 3], "over": [2, 3, 7, 8], "amount": [2, 3], "nois": [2, 3, 4, 11, 16], "elev": [2, 3, 4], "appli": [2, 3, 6], "To": [2, 3], "approxim": [2, 3], "small": [2, 3], "recommend": [2, 3, 8], "refit": [2, 4, 7], "determinist": [2, 3, 4, 18], "trace": [2, 3, 4, 20], "correct": [2, 3, 4, 20], "random": [2, 3, 4, 7, 11, 12, 14, 15, 16, 17, 20], "term": [2, 3, 4, 7, 8], "same": [2, 3, 4, 8], "yield": [2, 3, 4], "smaller": [2, 3, 4, 7], "varianc": [2, 3, 4, 18], "err_est": [2, 3, 4, 5], "arbitrari": [3, 8, 20], "bag": [4, 6, 20], "ani": [5, 6], "depend": 5, "type": 5, "criterion": 6, "squared_error": 6, "min_samples_split": 6, "min_samples_leaf": 6, "min_weight_fraction_leaf": 6, "max_leaf_nod": 6, "min_impurity_decreas": 6, "ccp_alpha": 6, "monotonic_cst": 6, "tree": [6, 11, 13, 14, 15, 17, 19], "leaf": 6, "intern": [6, 8], "its": 6, "dtype": [6, 9, 11, 12, 14, 15, 16, 17, 18, 19], "convert": 6, "float32": 6, "csr_matrix": 6, "x_leav": 6, "datapoint": 6, "end": 6, "up": [6, 7], "decision_path": 6, "decis": [6, 11, 14, 15, 17], "path": 6, "18": [6, 15, 18], "n_node": 6, "node": 6, "non": [6, 7, 8, 19], "zero": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19], "element": [6, 8], "goe": 6, "through": 6, "csr": [6, 8], "format": 6, "n_nodes_ptr": 6, "column": [6, 8], "give": 6, "th": 6, "csc_matrix": 6, "split": [6, 19], "child": 6, "net": 6, "while": 6, "search": 6, "also": [6, 7], "result": 6, "singl": 6, "carri": 6, "either": 6, "chol": 6, "check": [6, 7, 8, 9], "metadatarequest": [6, 7, 8, 9], "encapsul": [6, 7, 8, 9], "inform": [6, 7, 8, 9], "feature_importances_": 6, "impur": 6, "import": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19], "higher": [6, 7], "more": 6, "normal": 6, "reduct": [6, 18], "brought": 6, "It": [6, 8], "known": 6, "gini": 6, "warn": 6, "mislead": 6, "high": 6, "cardin": 6, "mani": 6, "uniqu": 6, "inspect": 6, "permutation_import": 6, "altern": 6, "unless": 6, "root": 6, "lambd": [7, 11, 13, 15], "fit_intercept": [7, 9, 16], "copy_x": [7, 9], "max_it": 7, "1000": 7, "tol": 7, "0001": 7, "posit": [7, 8, 9], "select": 7, "cyclic": 7, "relax": [7, 11, 13], "lasso": [7, 11, 12, 13, 18], "usual": [7, 19], "unpen": 7, "multipli": 7, "l1": 7, "control": [7, 8], "regular": 7, "strength": 7, "inf": 7, "whether": 7, "calcul": 7, "intercept": [7, 8], "center": 7, "gram": 7, "speed": 7, "preserv": 7, "sparsiti": 7, "copi": 7, "els": [7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19], "overwritten": 7, "maximum": [7, 8], "iter": 7, "toler": 7, "optim": 7, "code": 7, "dual": 7, "gap": 7, "continu": [7, 8], "until": 7, "1e": 7, "4": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19], "reus": 7, "solut": 7, "previou": 7, "initi": 7, "just": 7, "eras": 7, "forc": 7, "seed": [7, 11, 12, 13, 14, 15, 16, 18, 19], "pseudo": 7, "reproduc": 7, "output": [7, 8], "across": 7, "multipl": 7, "everi": 7, "rather": 7, "loop": 7, "sequenti": 7, "often": 7, "lead": 7, "significantli": 7, "faster": [7, 8], "converg": 7, "especi": 7, "lasso_i": 7, "lin_i": 7, "fit_linear": 7, "n_knot": 8, "5": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19], "degre": 8, "knot": 8, "uniform": [8, 11, 12, 15, 16, 17, 18, 19], "extrapol": 8, "include_bia": 8, "c": [8, 9], "sparse_output": 8, "bspline": 8, "b": [8, 17], "spline": [8, 16], "expand": 8, "one": 8, "quantil": 8, "larger": 8, "polynomi": 8, "basi": 8, "integ": 8, "first": 8, "last": 8, "distribut": 8, "uniformli": 8, "min": 8, "max": 8, "along": 8, "directli": 8, "specifi": 8, "sort": 8, "includ": 8, "boundari": 8, "ad": 8, "befor": 8, "after": 8, "period": 8, "outsid": 8, "valueerror": 8, "minimum": 8, "scipi": 8, "interpol": 8, "distanc": 8, "between": 8, "enforc": 8, "deriv": 8, "exampl": 8, "make": 8, "avoid": 8, "introduc": 8, "jump": 8, "dec": 8, "31st": 8, "jan": 8, "1st": 8, "natur": 8, "dai": 8, "year": 8, "manual": 8, "rang": 8, "drop": 8, "As": 8, "point": 8, "implicitli": 8, "bia": 8, "ones": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19], "act": 8, "f": 8, "dens": 8, "slow": 8, "down": 8, "subsequ": 8, "Will": [8, 9], "avail": 8, "8": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_target": 9, "cast": 9, "necessari": 9, "individu": 9, "17": [9, 13, 15, 18], "numpi": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gaussian_process": [11, 12, 13, 14, 15, 16, 17, 18, 19], "matern": [11, 12, 13, 14, 15, 16, 17, 18, 19], "rbf": [11, 12, 13, 14, 15, 16, 17, 18, 19], "plotli": [11, 12, 13, 14, 15, 16, 17, 18, 19], "doc": [11, 12, 13, 14, 15, 16, 17, 18, 19], "mse_estim": [11, 12, 13, 14, 15, 16, 18, 19], "errorcompar": [11, 12, 13, 14, 15, 16, 18, 19], "data_gener": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gen_rbf_x": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gen_matern_x": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gen_cov_mat": [11, 12, 13, 14, 15, 16, 17, 18, 19], "plotting_util": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gen_model_barplot": [11, 12, 13, 14, 15, 16, 17, 18, 19], "spe": [11, 12, 13, 14, 15, 16, 17, 18, 19], "relaxed_lasso": [11, 13], "relaxedlasso": [11, 13], "kfoldcv": [11, 12, 15, 16], "kmeanscv": [11, 12, 15, 16], "new_y_est": [11, 12, 13, 14, 15, 16, 18, 19], "cp_adaptive_smooth": 11, "here": [11, 12, 13, 14, 15, 16, 17, 19], "we": [11, 12, 13, 14, 15, 16, 17, 19], "demonstr": [11, 12, 13, 16], "realiz": [11, 12, 13, 14, 15, 16, 17, 18, 19], "run": [11, 12, 13, 14, 15, 16, 17, 18, 19], "niter": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gsize": [11, 12, 13, 14, 15, 16, 17, 18, 19], "p": [11, 12, 13, 14, 15, 16, 17, 18, 19], "200": [11, 12, 14, 18], "delta": [11, 12, 13, 14, 15, 16, 17, 18, 19], "75": [11, 12, 13, 14, 15, 16, 17, 18, 19], "snr": [11, 12, 13, 14, 15, 16, 17, 18, 19], "tr_frac": [11, 12, 13, 14, 15, 16, 18, 19], "noise_kernel": [11, 12, 13, 14, 15, 16, 17, 18, 19], "noise_length_scal": [11, 12, 13, 14, 15, 16, 17, 18, 19], "noise_nu": [11, 12, 13, 14, 15, 16, 17, 18, 19], "x_kernel": [11, 12, 13, 14, 15, 16, 17, 18, 19], "x_length_scal": [11, 12, 13, 14, 15, 16, 17, 18, 19], "x_nu": [11, 12, 13, 14, 15, 16, 17, 18, 19], "k": [11, 12, 13, 14, 15, 16], "31": [11, 12, 13, 15], "est": [11, 12, 13, 14, 15, 16, 18, 19], "est_kwarg": [11, 12, 13, 14, 15, 16, 18, 19], "plot": [11, 12, 13, 14, 16, 17, 18, 19], "model_nam": [11, 12, 13, 14, 15, 16, 17, 18, 19], "est_nam": [11, 12, 13, 14, 15, 16, 17, 18, 19], "gencp": [11, 12, 13, 14, 16, 17], "kfcv": [11, 12, 15, 16, 17], "spcv": [11, 12, 15, 16, 17], "err_cmp": [11, 12, 13, 14, 15, 16, 18, 19], "nx": [11, 12, 13, 14, 15, 16, 17, 18, 19], "ny": [11, 12, 13, 14, 15, 16, 17, 18, 19], "sqrt": [11, 12, 13, 14, 15, 16, 17, 18, 19], "linspac": [11, 12, 13, 14, 15, 16, 17, 18, 19], "c_x": [11, 12, 13, 14, 15, 16, 17, 18, 19], "c_y": [11, 12, 13, 14, 15, 16, 17, 18, 19], "meshgrid": [11, 12, 13, 14, 15, 16, 17, 18, 19], "flatten": [11, 12, 13, 14, 15, 16, 17, 18, 19], "coord": [11, 12, 13, 14, 15, 16, 17, 18, 19], "stack": [11, 12, 13, 14, 15, 16, 17, 18, 19], "6": [11, 12, 13, 14, 15, 16, 17, 18, 19], "sigma_t": [11, 12, 13, 14, 15, 16, 17, 18, 19], "length_scal": [11, 12, 13, 14, 15, 16, 17, 18, 19], "elif": [11, 12, 13, 14, 15, 16, 17, 18, 19], "nu": [11, 12, 13, 14, 15, 16, 17, 18, 19], "linalg": [11, 12, 13, 14, 15, 16, 17, 18, 19], "7": [11, 12, 13, 14, 15, 16, 17, 18, 19], "randn": [11, 12, 13, 14, 15, 16, 17, 18, 19], "beta": [11, 12, 14, 15, 16, 17, 18, 19], "idx": [11, 12, 14, 15, 16, 17, 18, 19], "choic": [11, 12, 14, 15, 16, 17, 18, 19], "size": [11, 12, 14, 15, 16, 17, 18, 19], "replac": [11, 12, 14, 15, 16, 17, 18, 19], "9": [11, 12, 13, 14, 15, 16, 17, 18, 19], "model_err": [11, 12, 15, 16, 18, 19], "err": [11, 12, 13, 14, 15, 16, 18, 19], "compar": [11, 12, 13, 14, 15, 16, 18, 19], "fair": [11, 12, 13, 14, 15, 16, 18, 19], "est_sigma": [11, 12, 14, 15, 16], "append": [11, 12, 13, 14, 15, 16, 18, 19], "00": [11, 12, 13, 14, 15, 16, 18, 19], "lt": [11, 12, 13, 14, 15, 16, 18, 19], "32": 11, "07it": 11, "01": [11, 12, 13, 15, 18, 19], "41it": 11, "offlin": [11, 12, 13, 14, 15, 16, 17, 18, 19], "init_notebook_mod": [11, 12, 13, 14, 15, 16, 17, 18, 19], "fig": [11, 12, 13, 14, 15, 16, 17, 18, 19], "titl": [11, 12, 13, 14, 15, 16, 18, 19], "No": [11, 16], "share": [11, 16], "has_elev_err": [11, 12, 14, 17, 18], "show": [11, 12, 13, 14, 15, 16, 17, 18, 19], "11": [11, 12, 13, 14, 15, 16, 18], "corr_model_err": [11, 12, 15, 16, 18], "46": [11, 13, 14], "14it": 11, "19": [11, 13], "26it": 11, "12": [11, 12, 13, 14, 15, 16, 18, 19], "corr_fig": [11, 12, 15, 16, 18], "structur": [11, 16], "linear_model": [12, 15, 18], "lassocv": [12, 18], "ridgecv": [12, 15, 18], "cp_arbitrari": [12, 14, 15, 17, 18], "lambda": [12, 18], "logspac": [12, 18], "ridg": [12, 15, 18], "cv": [12, 15, 18], "16": [12, 13, 15], "01it": [12, 13], "03": [12, 15, 16, 18, 19], "86": 12, "54": [12, 13], "34": [12, 15], "nsn": [12, 13, 15, 18], "err_bar": [12, 14, 15, 18, 19], "fig_nam": [12, 13, 14, 15], "gen_ind": 12, "37": 12, "68it": [12, 13], "02": [12, 15], "53": 12, "74": 12, "57": 12, "77": 12, "ssn": [12, 13, 14, 15, 18, 19], "gen_corr": 12, "express": [13, 14, 15, 18, 19], "px": [13, 14, 15, 18, 19], "create_clus_split": 13, "cp_bag": [13, 19], "simple_train_test_split": 13, "25": [13, 14, 15, 16, 18], "bagg": 13, "forest": [13, 15, 20], "spat_ind_model_err": 13, "friedman_mu": 13, "28": 13, "54it": 13, "02it": [13, 15], "spat_fig": 13, "color_discrete_sequ": [13, 14, 15, 18, 19], "color": [13, 14, 15, 18, 19], "qualit": [13, 14, 15, 18, 19], "bold": [13, 14, 15, 18, 19], "bag_spat_ind": 13, "spat_corr_model_err": 13, "85it": 13, "16it": 13, "spat_corr_fig": 13, "bag_spat_corr": 13, "13": [13, 14, 15, 16, 18], "concaten": 13, "astyp": 13, "shuffl": 13, "14": [13, 15], "trts_ind_model_err": 13, "33": 13, "21": [13, 15], "15": [13, 15, 16, 18], "bag_trts_ind": 13, "trts_corr_model_err": 13, "09": 13, "44it": 13, "62it": 13, "trts_corr_fig": 13, "bag_trts_corr": 13, "decisiontreeregressor": [14, 17], "by_spati": 14, "sigma_x": 14, "chol_x": 14, "x_spike": 14, "x_iso": 14, "30": [14, 17, 19], "sigma_x_less": 14, "chol_x_less": 14, "x_less": 14, "spike_model_err": 14, "47": 14, "12it": 14, "iid_model_err": 14, "15it": 14, "corr": [14, 18], "iid": 14, "depth": 14, "by_comp": 14, "randomforestregressor": [15, 19], "investig": 15, "qualiti": 15, "20": [15, 18, 19], "ogencp": 15, "egencp": 15, "true_model_err": 15, "piecewise_const_mu": 15, "27": [15, 16], "67it": 15, "04": 15, "24": [15, 18], "70it": 15, "09it": 15, "clone": 15, "est_sigma_model": 15, "35": 15, "43": 15, "comb_err": 15, "true_err": 15, "zip": 15, "importlib": [15, 19], "reload": [15, 19], "est_cov_ind": 15, "true_corr_model_err": 15, "07": 15, "71it": 15, "45": 15, "06": [15, 16, 18], "corr_resp": 15, "40": 15, "61": 15, "42": 15, "44": 15, "comb_errs_corr": 15, "est_cov_corr": 15, "cp_smoother": 16, "linearregress": 16, "bsplineregressor": 16, "73it": 16, "32it": 16, "08": 16, "37it": 16, "99it": 16, "basic": 17, "ind_est": 17, "4930723502728087": 17, "corr_est": 17, "6283975002810962": 17, "has_test_risk": [17, 19], "simul": 18, "mathrm": 18, "tr": 18, "theta_p": 18, "perp": 18, "omega": 18, "_2": 18, "rand": 18, "22": 18, "82": 18, "56": 18, "var": 18, "chol_y_ystar": 18, "38": 18, "parametricrandomforestregressor": 19, "rf": 19, "technic": 19, "blur": 19, "nprf": 19, "prf": 19, "gencpprf": 19, "59it": 19, "spatial": 19, "pastel": 19, "quickstart": 20, "oracl": 20, "BY": 20, "comparison": 20}, "objects": {"spe.bagging": [[1, 0, 1, "", "ParametricBaggingRegressor"]], "spe.bagging.ParametricBaggingRegressor": [[1, 1, 1, "", "__init__"], [1, 2, 1, "id0", "estimators_samples_"], [1, 1, 1, "id1", "fit"], [1, 1, 1, "", "get_group_X"], [1, 1, 1, "", "get_linear_smoother"], [1, 1, 1, "id2", "get_metadata_routing"], [1, 1, 1, "id3", "get_params"], [1, 1, 1, "id4", "predict"], [1, 1, 1, "id5", "score"], [1, 1, 1, "id6", "set_fit_request"], [1, 1, 1, "id7", "set_params"], [1, 1, 1, "id8", "set_predict_request"], [1, 1, 1, "id9", "set_score_request"]], "spe.estimators": [[2, 3, 1, "", "cp_adaptive_smoother"], [3, 3, 1, "", "cp_arbitrary"], [4, 3, 1, "", "cp_bagged"], [5, 3, 1, "", "cp_smoother"]], "spe.forest": [[6, 0, 1, "", "ParametricRandomForestRegressor"]], "spe.forest.ParametricRandomForestRegressor": [[6, 1, 1, "", "__init__"], [6, 1, 1, "id0", "apply"], [6, 1, 1, "id1", "decision_path"], [6, 2, 1, "id2", "estimators_samples_"], [6, 2, 1, "id3", "feature_importances_"], [6, 1, 1, "id4", "fit"], [6, 1, 1, "", "get_group_X"], [6, 1, 1, "", "get_linear_smoother"], [6, 1, 1, "id5", "get_metadata_routing"], [6, 1, 1, "id6", "get_params"], [6, 1, 1, "id7", "predict"], [6, 1, 1, "id8", "score"], [6, 1, 1, "id9", "set_fit_request"], [6, 1, 1, "id10", "set_params"], [6, 1, 1, "id11", "set_score_request"]], "spe.relaxed_lasso": [[7, 0, 1, "", "RelaxedLasso"]], "spe.relaxed_lasso.RelaxedLasso": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_linear"], [7, 1, 1, "", "get_group_X"], [7, 1, 1, "", "get_linear_smoother"], [7, 1, 1, "id0", "get_metadata_routing"], [7, 1, 1, "id1", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "id2", "set_fit_request"], [7, 1, 1, "id3", "set_params"], [7, 1, 1, "id4", "set_predict_request"]], "spe.smoothers": [[8, 0, 1, "", "BSplineRegressor"], [9, 0, 1, "", "LinearRegression"]], "spe.smoothers.BSplineRegressor": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "get_group_X"], [8, 1, 1, "", "get_linear_smoother"], [8, 1, 1, "id0", "get_metadata_routing"], [8, 1, 1, "id1", "get_params"], [8, 1, 1, "", "predict"], [8, 1, 1, "id2", "set_params"]], "spe.smoothers.LinearRegression": [[9, 1, 1, "", "__init__"], [9, 1, 1, "id0", "fit"], [9, 1, 1, "", "get_group_X"], [9, 1, 1, "", "get_linear_smoother"], [9, 1, 1, "id1", "get_metadata_routing"], [9, 1, 1, "id2", "get_params"], [9, 1, 1, "id3", "predict"], [9, 1, 1, "id4", "score"], [9, 1, 1, "id5", "set_fit_request"], [9, 1, 1, "id6", "set_params"], [9, 1, 1, "id7", "set_predict_request"], [9, 1, 1, "id8", "set_score_request"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "spe": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "bag": [0, 1, 13], "estim": [0, 2, 3, 4, 5, 15, 17], "forest": [0, 6, 19], "relaxed_lasso": [0, 7], "smoother": [0, 8, 9, 11, 16], "parametricbaggingregressor": 1, "cp_adaptive_smooth": 2, "cp_arbitrari": 3, "cp_bag": 4, "cp_smoother": 5, "parametricrandomforestregressor": 6, "relaxedlasso": 7, "bsplineregressor": 8, "linearregress": 9, "document": 10, "adapt": 11, "linear": [11, 16], "simul": [11, 12, 13, 14, 15, 16, 20], "y": [11, 12, 13, 14, 15, 16, 17], "overset": [11, 12, 13, 15, 16, 17], "iid": [11, 12, 13, 15, 16, 17], "sim": [11, 12, 13, 14, 15, 16, 17], "mathcal": [11, 12, 13, 14, 15, 16, 17], "n": [11, 12, 13, 14, 15, 16, 17], "mu": [11, 12, 13, 14, 15, 16, 17], "sigma_i": [11, 12, 13, 14, 15, 16, 17], "begin": [11, 12, 13, 14, 15, 16, 17], "pmatrix": [11, 12, 13, 14, 15, 16, 17], "end": [11, 12, 13, 14, 15, 16, 17], "left": [11, 12, 13, 14, 15, 16, 17], "sigma_": [11, 12, 13, 14, 15, 16, 17], "right": [11, 12, 13, 14, 15, 16, 17], "arbitrari": 12, "model": [12, 13, 15], "spatial": 13, "80": 13, "20": 13, "split": 13, "random": [13, 18, 19], "gener": [14, 17], "BY": 14, "comparison": [14, 19], "x_": 14, "cdot": 14, "i": 14, "independ": 14, "uniform": 14, "spike": 14, "locat": 14, "interpol": 14, "base": 14, "cov": [14, 15], "matrix": 14, "0": 14, "sigma": 14, "2": 14, "v": [15, 18], "oracl": 15, "covari": 15, "true": 15, "match": 15, "quickstart": 17, "toi": 17, "data": 17, "mse": 17, "trace": 18, "correct": 18, "user": 20, "guid": 20, "get": 20, "start": 20}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "spe.bagging": [[0, "spe-bagging"]], "spe.estimators": [[0, "spe-estimators"]], "spe.forest": [[0, "spe-forest"]], "spe.relaxed_lasso": [[0, "spe-relaxed-lasso"]], "spe.smoothers": [[0, "spe-smoothers"]], "spe.bagging.ParametricBaggingRegressor": [[1, "spe-bagging-parametricbaggingregressor"]], "spe.estimators.cp_adaptive_smoother": [[2, "spe-estimators-cp-adaptive-smoother"]], "spe.estimators.cp_arbitrary": [[3, "spe-estimators-cp-arbitrary"]], "spe.estimators.cp_bagged": [[4, "spe-estimators-cp-bagged"]], "spe.estimators.cp_smoother": [[5, "spe-estimators-cp-smoother"]], "spe.forest.ParametricRandomForestRegressor": [[6, "spe-forest-parametricrandomforestregressor"]], "spe.relaxed_lasso.RelaxedLasso": [[7, "spe-relaxed-lasso-relaxedlasso"]], "spe.smoothers.BSplineRegressor": [[8, "spe-smoothers-bsplineregressor"]], "spe.smoothers.LinearRegression": [[9, "spe-smoothers-linearregression"]], "SPE Documentation": [[10, "spe-documentation"]], "Adaptive Linear Smoothers": [[11, "Adaptive-Linear-Smoothers"]], "Simulate Y, Y^* \\overset{iid}{\\sim} \\mathcal{N}(\\mu, \\Sigma_Y)": [[11, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [12, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [13, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [13, "id1"], [15, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [16, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"]], "Simulate \\begin{pmatrix} Y \\\\ Y^* \\end{pmatrix} \\sim \\mathcal{N}\\left(\\begin{pmatrix} \\mu \\\\ \\mu \\end{pmatrix}, \\begin{pmatrix}\\Sigma_Y & \\Sigma_{Y, Y^*} \\\\ \\Sigma_{Y^*, Y} & \\Sigma_{Y} \\end{pmatrix}\\right)": [[11, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [12, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [13, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [13, "id2"], [14, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [15, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [16, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"]], "Arbitrary Models": [[12, "Arbitrary-Models"]], "Bagged Models": [[13, "Bagged-Models"]], "Spatial 80/20 Split": [[13, "Spatial-80/20-Split"]], "Random 80/20 Split": [[13, "Random-80/20-Split"]], "Generalized BY Comparison": [[14, "Generalized-BY-Comparison"]], "X_{\\cdot,i} independently generated by uniform spikes at locations, then interpolate based on cov matrix": [[14, "X_{\\cdot,i}-independently-generated-by-uniform-spikes-at-locations,-then-interpolate-based-on-cov-matrix"]], "X_{i,\\cdot} \\sim \\mathcal{N}(0, I\\sigma^2)": [[14, "X_{i,\\cdot}-\\sim-\\mathcal{N}(0,-I\\sigma^2)"]], "Estimated vs Oracle Covariance": [[15, "Estimated-vs-Oracle-Covariance"]], "Estimate with True Covs": [[15, "Estimate-with-True-Covs"], [15, "id1"]], "Estimate with Matching Model": [[15, "Estimate-with-Matching-Model"], [15, "id2"]], "Linear Smoothers": [[16, "Linear-Smoothers"]], "Quickstart": [[17, "Quickstart"]], "Generate toy data": [[17, "Generate-toy-data"]], "Estimate MSE for Y, Y^* \\overset{iid}{\\sim} \\mathcal{N}(\\mu, \\Sigma_Y)": [[17, "Estimate-MSE-for-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"]], "Estimate MSE for \\begin{pmatrix} Y \\\\ Y^* \\end{pmatrix} \\sim \\mathcal{N}\\left(\\begin{pmatrix} \\mu \\\\ \\mu \\end{pmatrix}, \\begin{pmatrix}\\Sigma_Y & \\Sigma_{Y, Y^*} \\\\ \\Sigma_{Y^*, Y} & \\Sigma_{Y} \\end{pmatrix}\\right)": [[17, "Estimate-MSE-for-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"]], "Trace Correction vs Random Correction": [[18, "Trace-Correction-vs-Random-Correction"]], "Random Forest Comparisons": [[19, "Random-Forest-Comparisons"]], "User Guide": [[20, "user-guide"]], "Getting started": [[20, "getting-started"]], "Simulations": [[20, "simulations"]]}, "indexentries": {"parametricbaggingregressor (class in spe.bagging)": [[1, "spe.bagging.ParametricBaggingRegressor"]], "__init__() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.__init__"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor attribute)": [[1, "spe.bagging.ParametricBaggingRegressor.estimators_samples_"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor property)": [[1, "id0"]], "fit() (spe.bagging.parametricbaggingregressor method)": [[1, "id1"], [1, "spe.bagging.ParametricBaggingRegressor.fit"]], "get_group_x() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_group_X"]], "get_linear_smoother() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.bagging.parametricbaggingregressor method)": [[1, "id2"], [1, "spe.bagging.ParametricBaggingRegressor.get_metadata_routing"]], "get_params() (spe.bagging.parametricbaggingregressor method)": [[1, "id3"], [1, "spe.bagging.ParametricBaggingRegressor.get_params"]], "predict() (spe.bagging.parametricbaggingregressor method)": [[1, "id4"], [1, "spe.bagging.ParametricBaggingRegressor.predict"]], "score() (spe.bagging.parametricbaggingregressor method)": [[1, "id5"], [1, "spe.bagging.ParametricBaggingRegressor.score"]], "set_fit_request() (spe.bagging.parametricbaggingregressor method)": [[1, "id6"], [1, "spe.bagging.ParametricBaggingRegressor.set_fit_request"]], "set_params() (spe.bagging.parametricbaggingregressor method)": [[1, "id7"], [1, "spe.bagging.ParametricBaggingRegressor.set_params"]], "set_predict_request() (spe.bagging.parametricbaggingregressor method)": [[1, "id8"], [1, "spe.bagging.ParametricBaggingRegressor.set_predict_request"]], "set_score_request() (spe.bagging.parametricbaggingregressor method)": [[1, "id9"], [1, "spe.bagging.ParametricBaggingRegressor.set_score_request"]], "cp_adaptive_smoother() (in module spe.estimators)": [[2, "spe.estimators.cp_adaptive_smoother"]], "cp_arbitrary() (in module spe.estimators)": [[3, "spe.estimators.cp_arbitrary"]], "cp_bagged() (in module spe.estimators)": [[4, "spe.estimators.cp_bagged"]], "cp_smoother() (in module spe.estimators)": [[5, "spe.estimators.cp_smoother"]], "parametricrandomforestregressor (class in spe.forest)": [[6, "spe.forest.ParametricRandomForestRegressor"]], "__init__() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.__init__"]], "apply() (spe.forest.parametricrandomforestregressor method)": [[6, "id0"], [6, "spe.forest.ParametricRandomForestRegressor.apply"]], "decision_path() (spe.forest.parametricrandomforestregressor method)": [[6, "id1"], [6, "spe.forest.ParametricRandomForestRegressor.decision_path"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.estimators_samples_"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor property)": [[6, "id2"]], "feature_importances_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.feature_importances_"]], "feature_importances_ (spe.forest.parametricrandomforestregressor property)": [[6, "id3"]], "fit() (spe.forest.parametricrandomforestregressor method)": [[6, "id4"], [6, "spe.forest.ParametricRandomForestRegressor.fit"]], "get_group_x() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_group_X"]], "get_linear_smoother() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.forest.parametricrandomforestregressor method)": [[6, "id5"], [6, "spe.forest.ParametricRandomForestRegressor.get_metadata_routing"]], "get_params() (spe.forest.parametricrandomforestregressor method)": [[6, "id6"], [6, "spe.forest.ParametricRandomForestRegressor.get_params"]], "predict() (spe.forest.parametricrandomforestregressor method)": [[6, "id7"], [6, "spe.forest.ParametricRandomForestRegressor.predict"]], "score() (spe.forest.parametricrandomforestregressor method)": [[6, "id8"], [6, "spe.forest.ParametricRandomForestRegressor.score"]], "set_fit_request() (spe.forest.parametricrandomforestregressor method)": [[6, "id9"], [6, "spe.forest.ParametricRandomForestRegressor.set_fit_request"]], "set_params() (spe.forest.parametricrandomforestregressor method)": [[6, "id10"], [6, "spe.forest.ParametricRandomForestRegressor.set_params"]], "set_score_request() (spe.forest.parametricrandomforestregressor method)": [[6, "id11"], [6, "spe.forest.ParametricRandomForestRegressor.set_score_request"]], "relaxedlasso (class in spe.relaxed_lasso)": [[7, "spe.relaxed_lasso.RelaxedLasso"]], "__init__() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.__init__"]], "fit() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit"]], "fit_linear() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit_linear"]], "get_group_x() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_group_X"]], "get_linear_smoother() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_linear_smoother"]], "get_metadata_routing() (spe.relaxed_lasso.relaxedlasso method)": [[7, "id0"], [7, "spe.relaxed_lasso.RelaxedLasso.get_metadata_routing"]], "get_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "id1"], [7, "spe.relaxed_lasso.RelaxedLasso.get_params"]], "predict() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.predict"]], "set_fit_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "id2"], [7, "spe.relaxed_lasso.RelaxedLasso.set_fit_request"]], "set_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "id3"], [7, "spe.relaxed_lasso.RelaxedLasso.set_params"]], "set_predict_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "id4"], [7, "spe.relaxed_lasso.RelaxedLasso.set_predict_request"]], "bsplineregressor (class in spe.smoothers)": [[8, "spe.smoothers.BSplineRegressor"]], "__init__() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.__init__"]], "fit() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.fit"]], "get_group_x() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_group_X"]], "get_linear_smoother() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.smoothers.bsplineregressor method)": [[8, "id0"], [8, "spe.smoothers.BSplineRegressor.get_metadata_routing"]], "get_params() (spe.smoothers.bsplineregressor method)": [[8, "id1"], [8, "spe.smoothers.BSplineRegressor.get_params"]], "predict() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.predict"]], "set_params() (spe.smoothers.bsplineregressor method)": [[8, "id2"], [8, "spe.smoothers.BSplineRegressor.set_params"]], "linearregression (class in spe.smoothers)": [[9, "spe.smoothers.LinearRegression"]], "__init__() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.__init__"]], "fit() (spe.smoothers.linearregression method)": [[9, "id0"], [9, "spe.smoothers.LinearRegression.fit"]], "get_group_x() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_group_X"]], "get_linear_smoother() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_linear_smoother"]], "get_metadata_routing() (spe.smoothers.linearregression method)": [[9, "id1"], [9, "spe.smoothers.LinearRegression.get_metadata_routing"]], "get_params() (spe.smoothers.linearregression method)": [[9, "id2"], [9, "spe.smoothers.LinearRegression.get_params"]], "predict() (spe.smoothers.linearregression method)": [[9, "id3"], [9, "spe.smoothers.LinearRegression.predict"]], "score() (spe.smoothers.linearregression method)": [[9, "id4"], [9, "spe.smoothers.LinearRegression.score"]], "set_fit_request() (spe.smoothers.linearregression method)": [[9, "id5"], [9, "spe.smoothers.LinearRegression.set_fit_request"]], "set_params() (spe.smoothers.linearregression method)": [[9, "id6"], [9, "spe.smoothers.LinearRegression.set_params"]], "set_predict_request() (spe.smoothers.linearregression method)": [[9, "id7"], [9, "spe.smoothers.LinearRegression.set_predict_request"]], "set_score_request() (spe.smoothers.linearregression method)": [[9, "id8"], [9, "spe.smoothers.LinearRegression.set_score_request"]]}})