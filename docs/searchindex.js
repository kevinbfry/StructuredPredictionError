Search.setIndex({"docnames": ["api_reference", "generated/spe.bagging.ParametricBaggingRegressor", "generated/spe.estimators.cp_adaptive_smoother", "generated/spe.estimators.cp_smoother", "generated/spe.forest.ParametricRandomForestRegressor", "index", "user_guide"], "filenames": ["api_reference.rst", "generated/spe.bagging.ParametricBaggingRegressor.rst", "generated/spe.estimators.cp_adaptive_smoother.rst", "generated/spe.estimators.cp_smoother.rst", "generated/spe.forest.ParametricRandomForestRegressor.rst", "index.rst", "user_guide.rst"], "titles": ["API Reference", "spe.bagging.ParametricBaggingRegressor", "spe.estimators.cp_adaptive_smoother", "spe.estimators.cp_smoother", "spe.forest.ParametricRandomForestRegressor", "SPE Documentation", "User Guide"], "terms": {"class": [1, 4], "estim": [1, 4], "none": [1, 2, 3, 4], "n_estim": [1, 4], "10": 1, "max_sampl": [1, 4], "1": [1, 4], "0": [1, 2, 3, 4], "max_featur": [1, 4], "bootstrap": [1, 2, 4], "true": [1, 2, 4], "bootstrap_featur": 1, "fals": [1, 2, 4], "oob_scor": [1, 4], "warm_start": [1, 4], "n_job": [1, 4], "random_st": [1, 4], "verbos": [1, 4], "method": [1, 4], "attribut": [1, 4], "__init__": [1, 4], "fit": [1, 4], "x": [1, 2, 3, 4], "y": [1, 2, 3, 4], "max_depth": [1, 4], "sample_weight": [1, 4], "check_input": 1, "chol_ep": [1, 4], "do_param_boot": [1, 4], "build": [1, 4], "ensembl": [1, 4], "from": [1, 4], "train": [1, 2, 3, 4], "set": [1, 2, 3, 4], "paramet": [1, 2, 3, 4], "arrai": [1, 2, 3, 4], "like": [1, 2, 3, 4], "spars": [1, 4], "matrix": [1, 2, 3, 4], "shape": [1, 2, 3, 4], "n_sampl": [1, 4], "n_featur": [1, 4], "The": [1, 4], "input": [1, 4], "sampl": [1, 4], "matric": 1, "ar": [1, 2, 4], "accept": 1, "onli": [1, 4], "thei": [1, 4], "support": 1, "base": [1, 4], "target": [1, 4], "valu": [1, 2, 4], "label": [1, 4], "classif": [1, 4], "real": [1, 4], "number": [1, 2, 4], "regress": [1, 4], "int": [1, 2], "float": [1, 2, 3, 4], "default": [1, 2, 3, 4], "argument": 1, "us": [1, 2, 4], "instead": [1, 4], "self": [1, 4], "overrid": 1, "when": [1, 4], "construct": 1, "ha": [1, 4], "weight": [1, 4], "If": [1, 2, 4], "equal": [1, 4], "note": [1, 4], "thi": [1, 4], "i": [1, 2, 3, 4], "bool": [1, 2, 3, 4], "function": 1, "option": [1, 2, 3, 4], "choleski": [1, 2, 3, 4], "parametr": [1, 4], "covari": [1, 2, 3, 4], "In": [1, 4], "case": [1, 2, 3, 4], "ignor": [1, 4], "np": [1, 2, 3, 4], "ey": [1, 2, 3, 4], "perform": [1, 2, 4], "return": [1, 2, 3, 4], "object": [1, 2, 3, 4], "get_group_x": [1, 4], "x_pred": 1, "get_linear_smooth": [1, 4], "tr_idx": [1, 2, 3, 4], "ts_idx": [1, 4], "ret_full_p": [1, 4], "get_metadata_rout": [1, 4], "rais": [1, 4], "notimplementederror": 1, "doe": 1, "metadata": [1, 4], "rout": [1, 4], "yet": 1, "get_param": [1, 4], "deep": [1, 4], "get": [1, 4], "contain": [1, 4], "subobject": [1, 4], "param": [1, 4], "dict": [1, 4], "name": [1, 4], "map": [1, 4], "predict": [1, 2, 4], "y_refit": 1, "an": [1, 2, 4], "comput": [1, 2, 3, 4], "mean": [1, 4], "ndarrai": [1, 4], "score": [1, 4], "coeffici": [1, 4], "determin": [1, 4], "r": [1, 4], "2": [1, 4], "defin": [1, 4], "frac": [1, 4], "u": [1, 4], "v": [1, 4], "where": [1, 4], "residu": [1, 4], "sum": [1, 4], "squar": [1, 4], "y_true": [1, 4], "y_pred": [1, 4], "total": [1, 4], "best": [1, 4], "possibl": [1, 4], "can": [1, 4], "neg": [1, 4], "becaus": [1, 4], "model": [1, 2, 3, 4], "arbitrarili": [1, 4], "wors": [1, 4], "A": [1, 4], "constant": [1, 4], "alwai": [1, 4], "expect": [1, 2, 4], "disregard": [1, 4], "featur": [1, 4], "would": [1, 4], "test": [1, 2, 3, 4], "For": [1, 4], "some": [1, 4], "mai": [1, 4], "precomput": [1, 4], "kernel": [1, 4], "list": [1, 4], "gener": [1, 4], "n_samples_fit": [1, 4], "n_output": [1, 4], "w": [1, 2, 4], "t": [1, 4], "call": [1, 4], "regressor": [1, 4], "multioutput": [1, 4], "uniform_averag": [1, 4], "version": [1, 4], "23": [1, 4], "keep": [1, 4], "consist": [1, 4], "r2_score": [1, 4], "influenc": [1, 4], "all": [1, 4], "except": [1, 4], "multioutputregressor": [1, 4], "set_fit_request": [1, 4], "str": [1, 4], "unchang": [1, 4], "request": [1, 4], "pass": [1, 4], "relev": [1, 4], "enable_metadata_rout": [1, 4], "see": [1, 4], "sklearn": [1, 4], "set_config": [1, 4], "pleas": [1, 4], "user": [1, 4], "guid": [1, 4], "how": [1, 4], "mechan": [1, 4], "work": [1, 4], "each": [1, 4], "provid": [1, 4], "meta": [1, 4], "error": [1, 4], "should": [1, 4], "given": [1, 4], "alia": [1, 4], "origin": [1, 2, 4], "util": [1, 4], "metadata_rout": [1, 4], "retain": [1, 4], "exist": [1, 4], "allow": [1, 4], "you": [1, 4], "chang": [1, 4], "other": [1, 4], "new": [1, 4], "3": [1, 4], "sub": [1, 4], "e": [1, 2, 4], "g": [1, 4], "insid": [1, 4], "pipelin": [1, 4], "otherwis": [1, 4], "effect": [1, 4], "updat": [1, 4], "set_param": [1, 4], "simpl": [1, 4], "well": [1, 4], "nest": [1, 4], "latter": [1, 4], "have": [1, 4], "form": [1, 4], "compon": [1, 4], "__": [1, 4], "so": [1, 4], "": [1, 2, 3, 4], "instanc": [1, 4], "set_predict_request": 1, "set_score_request": [1, 4], "estimators_samples_": [1, 4], "subset": [1, 4], "drawn": [1, 4], "dynam": [1, 4], "indic": [1, 4], "identifi": [1, 4], "member": [1, 4], "re": [1, 4], "creat": [1, 4], "properti": [1, 4], "order": [1, 4], "reduc": [1, 4], "memori": [1, 4], "footprint": [1, 4], "store": [1, 4], "data": [1, 2, 4], "thu": [1, 4], "fetch": [1, 4], "slower": [1, 4], "than": [1, 4], "chol_i": [2, 3], "chol_ystar": [2, 3], "cov_y_ystar": [2, 3], "nboot": 2, "100": [2, 4], "alpha": 2, "05": 2, "full_refit": 2, "use_trace_corr": 2, "ret_yhat": 2, "mallow": [2, 3], "cp": [2, 3], "ani": [2, 3, 4], "linear": [2, 3], "depend": [2, 3], "n": [2, 3], "p": [2, 3], "sigma_i": [2, 3], "which": [2, 3, 4], "sigma_": [2, 3], "assum": [2, 3], "n_boot": 2, "draw": 2, "averag": 2, "over": 2, "amount": 2, "nois": 2, "elev": 2, "appli": [2, 4], "To": 2, "approxim": 2, "small": 2, "recommend": 2, "refit": 2, "determinist": 2, "trace": 2, "correct": 2, "random": 2, "term": 2, "same": 2, "yield": 2, "smaller": 2, "varianc": 2, "err_est": [2, 3], "mse": [2, 3], "type": 3, "criterion": 4, "squared_error": 4, "min_samples_split": 4, "min_samples_leaf": 4, "min_weight_fraction_leaf": 4, "max_leaf_nod": 4, "min_impurity_decreas": 4, "ccp_alpha": 4, "monotonic_cst": 4, "tree": 4, "leaf": 4, "intern": 4, "its": 4, "dtype": 4, "convert": 4, "float32": 4, "csr_matrix": 4, "x_leav": 4, "datapoint": 4, "index": 4, "end": 4, "up": 4, "decision_path": 4, "decis": 4, "path": 4, "18": 4, "n_node": 4, "node": 4, "non": 4, "zero": 4, "element": 4, "goe": 4, "through": 4, "csr": 4, "format": 4, "n_nodes_ptr": 4, "column": 4, "give": 4, "th": 4, "csc_matrix": 4, "split": 4, "child": 4, "net": 4, "while": 4, "search": 4, "also": 4, "result": 4, "singl": 4, "carri": 4, "either": 4, "chol": 4, "check": 4, "metadatarequest": 4, "encapsul": 4, "inform": 4, "bag": 4, "feature_importances_": 4, "impur": 4, "import": 4, "higher": 4, "more": 4, "normal": 4, "reduct": 4, "brought": 4, "It": 4, "known": 4, "gini": 4, "warn": 4, "mislead": 4, "high": 4, "cardin": 4, "mani": 4, "uniqu": 4, "inspect": 4, "permutation_import": 4, "altern": 4, "unless": 4, "root": 4}, "objects": {"spe.bagging": [[1, 0, 1, "", "ParametricBaggingRegressor"]], "spe.bagging.ParametricBaggingRegressor": [[1, 1, 1, "", "__init__"], [1, 2, 1, "", "estimators_samples_"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "get_group_X"], [1, 1, 1, "", "get_linear_smoother"], [1, 1, 1, "", "get_metadata_routing"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "predict"], [1, 1, 1, "", "score"], [1, 1, 1, "", "set_fit_request"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "set_predict_request"], [1, 1, 1, "", "set_score_request"]], "spe.estimators": [[2, 3, 1, "", "cp_adaptive_smoother"], [3, 3, 1, "", "cp_smoother"]], "spe.forest": [[4, 0, 1, "", "ParametricRandomForestRegressor"]], "spe.forest.ParametricRandomForestRegressor": [[4, 1, 1, "", "__init__"], [4, 1, 1, "", "apply"], [4, 1, 1, "", "decision_path"], [4, 2, 1, "", "estimators_samples_"], [4, 2, 1, "", "feature_importances_"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "get_group_X"], [4, 1, 1, "", "get_linear_smoother"], [4, 1, 1, "", "get_metadata_routing"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "score"], [4, 1, 1, "", "set_fit_request"], [4, 1, 1, "", "set_params"], [4, 1, 1, "", "set_score_request"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "spe": [0, 1, 2, 3, 4, 5], "estim": [0, 2, 3], "bag": [0, 1], "forest": [0, 4], "parametricbaggingregressor": 1, "cp_adaptive_smooth": 2, "cp_smoother": 3, "parametricrandomforestregressor": 4, "document": 5, "user": 6, "guid": 6}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "spe.estimators": [[0, "spe-estimators"]], "spe.bagging": [[0, "spe-bagging"]], "spe.forest": [[0, "spe-forest"]], "spe.bagging.ParametricBaggingRegressor": [[1, "spe-bagging-parametricbaggingregressor"]], "spe.estimators.cp_adaptive_smoother": [[2, "spe-estimators-cp-adaptive-smoother"]], "spe.estimators.cp_smoother": [[3, "spe-estimators-cp-smoother"]], "spe.forest.ParametricRandomForestRegressor": [[4, "spe-forest-parametricrandomforestregressor"]], "SPE Documentation": [[5, "spe-documentation"]], "User Guide": [[6, "user-guide"]]}, "indexentries": {"parametricbaggingregressor (class in spe.bagging)": [[1, "spe.bagging.ParametricBaggingRegressor"]], "__init__() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.__init__"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor attribute)": [[1, "spe.bagging.ParametricBaggingRegressor.estimators_samples_"]], "fit() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.fit"]], "get_group_x() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_group_X"]], "get_linear_smoother() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_metadata_routing"]], "get_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_params"]], "predict() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.predict"]], "score() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.score"]], "set_fit_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_fit_request"]], "set_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_params"]], "set_predict_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_predict_request"]], "set_score_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_score_request"]], "cp_adaptive_smoother() (in module spe.estimators)": [[2, "spe.estimators.cp_adaptive_smoother"]], "cp_smoother() (in module spe.estimators)": [[3, "spe.estimators.cp_smoother"]], "parametricrandomforestregressor (class in spe.forest)": [[4, "spe.forest.ParametricRandomForestRegressor"]], "__init__() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.__init__"]], "apply() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.apply"]], "decision_path() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.decision_path"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor attribute)": [[4, "spe.forest.ParametricRandomForestRegressor.estimators_samples_"]], "feature_importances_ (spe.forest.parametricrandomforestregressor attribute)": [[4, "spe.forest.ParametricRandomForestRegressor.feature_importances_"]], "fit() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.fit"]], "get_group_x() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.get_group_X"]], "get_linear_smoother() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.get_metadata_routing"]], "get_params() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.get_params"]], "predict() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.predict"]], "score() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.score"]], "set_fit_request() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.set_fit_request"]], "set_params() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.set_params"]], "set_score_request() (spe.forest.parametricrandomforestregressor method)": [[4, "spe.forest.ParametricRandomForestRegressor.set_score_request"]]}})