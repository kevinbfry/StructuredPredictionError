Search.setIndex({"docnames": ["api_reference", "generated/spe.bagging.ParametricBaggingRegressor", "generated/spe.estimators.cp_adaptive_smoother", "generated/spe.estimators.cp_bagged", "generated/spe.estimators.cp_general", "generated/spe.estimators.cp_smoother", "generated/spe.forest.ParametricRandomForestRegressor", "generated/spe.relaxed_lasso.RelaxedLasso", "index", "user_guide"], "filenames": ["api_reference.rst", "generated/spe.bagging.ParametricBaggingRegressor.rst", "generated/spe.estimators.cp_adaptive_smoother.rst", "generated/spe.estimators.cp_bagged.rst", "generated/spe.estimators.cp_general.rst", "generated/spe.estimators.cp_smoother.rst", "generated/spe.forest.ParametricRandomForestRegressor.rst", "generated/spe.relaxed_lasso.RelaxedLasso.rst", "index.rst", "user_guide.rst"], "titles": ["API Reference", "spe.bagging.ParametricBaggingRegressor", "spe.estimators.cp_adaptive_smoother", "spe.estimators.cp_bagged", "spe.estimators.cp_general", "spe.estimators.cp_smoother", "spe.forest.ParametricRandomForestRegressor", "spe.relaxed_lasso.RelaxedLasso", "SPE Documentation", "User Guide"], "terms": {"class": [1, 6, 7], "estim": [1, 6, 7], "none": [1, 2, 3, 4, 5, 6, 7], "n_estim": [1, 3, 6], "10": 1, "max_sampl": [1, 6], "1": [1, 6, 7], "0": [1, 2, 3, 4, 5, 6, 7], "max_featur": [1, 6], "bootstrap": [1, 2, 3, 4, 6], "true": [1, 2, 3, 4, 6, 7], "bootstrap_featur": 1, "fals": [1, 2, 3, 4, 6, 7], "oob_scor": [1, 6], "warm_start": [1, 6, 7], "n_job": [1, 6], "random_st": [1, 6, 7], "verbos": [1, 6], "method": [1, 6, 7], "attribut": [1, 6], "__init__": [1, 6, 7], "fit": [1, 3, 6, 7], "x": [1, 2, 3, 4, 5, 6, 7], "y": [1, 2, 3, 4, 5, 6, 7], "max_depth": [1, 6], "sample_weight": [1, 6, 7], "check_input": [1, 7], "chol_ep": [1, 6], "do_param_boot": [1, 6], "build": [1, 6, 7], "ensembl": [1, 6], "from": [1, 6, 7], "train": [1, 2, 3, 4, 5, 6, 7], "set": [1, 2, 3, 4, 5, 6, 7], "paramet": [1, 2, 3, 4, 5, 6, 7], "arrai": [1, 2, 3, 4, 5, 6, 7], "like": [1, 2, 3, 4, 5, 6, 7], "spars": [1, 6, 7], "matrix": [1, 2, 3, 4, 5, 6, 7], "shape": [1, 2, 3, 4, 5, 6, 7], "n_sampl": [1, 2, 3, 4, 5, 6], "n_featur": [1, 2, 3, 4, 5, 6, 7], "The": [1, 2, 3, 4, 6, 7], "input": [1, 6, 7], "sampl": [1, 2, 3, 4, 5, 6], "matric": 1, "ar": [1, 2, 3, 6, 7], "accept": 1, "onli": [1, 6, 7], "thei": [1, 6], "support": 1, "base": [1, 3, 6], "target": [1, 6], "valu": [1, 2, 4, 6, 7], "label": [1, 6], "classif": [1, 6], "real": [1, 6], "number": [1, 2, 3, 4, 6, 7], "regress": [1, 6], "int": [1, 2, 3, 4, 7], "float": [1, 2, 3, 4, 5, 6, 7], "default": [1, 2, 3, 4, 5, 6, 7], "argument": [1, 7], "us": [1, 2, 3, 4, 6, 7], "instead": [1, 6, 7], "self": [1, 6, 7], "overrid": 1, "when": [1, 6, 7], "construct": 1, "ha": [1, 6, 7], "weight": [1, 6], "If": [1, 2, 3, 4, 6, 7], "equal": [1, 6], "note": [1, 6, 7], "thi": [1, 6, 7], "i": [1, 2, 3, 4, 5, 6, 7], "bool": [1, 2, 3, 4, 5, 6, 7], "function": [1, 7], "option": [1, 2, 3, 4, 5, 6, 7], "choleski": [1, 2, 3, 4, 5, 6], "parametr": [1, 6], "covari": [1, 2, 3, 4, 5, 6], "In": [1, 6], "case": [1, 2, 3, 4, 5, 6], "ignor": [1, 6, 7], "np": [1, 2, 3, 4, 5, 6], "ey": [1, 2, 3, 4, 5, 6], "perform": [1, 2, 4, 6], "return": [1, 2, 3, 4, 5, 6, 7], "object": [1, 2, 3, 4, 5, 6, 7], "get_group_x": [1, 6, 7], "x_pred": 1, "get_linear_smooth": [1, 6, 7], "tr_idx": [1, 2, 3, 4, 5, 6, 7], "ts_idx": [1, 6, 7], "ret_full_p": [1, 6, 7], "get_metadata_rout": [1, 6, 7], "rais": [1, 6, 7], "notimplementederror": 1, "doe": 1, "metadata": [1, 6, 7], "rout": [1, 6, 7], "yet": 1, "get_param": [1, 6, 7], "deep": [1, 6, 7], "get": [1, 6, 7], "contain": [1, 6, 7], "subobject": [1, 6, 7], "param": [1, 6, 7], "dict": [1, 6, 7], "name": [1, 6, 7], "map": [1, 6, 7], "predict": [1, 2, 3, 6, 7], "y_refit": [1, 7], "an": [1, 2, 3, 4, 6, 7], "comput": [1, 2, 3, 4, 5, 6], "mean": [1, 6], "ndarrai": [1, 6], "score": [1, 6], "coeffici": [1, 6, 7], "determin": [1, 6], "r": [1, 2, 6], "2": [1, 6], "defin": [1, 6], "frac": [1, 6], "u": [1, 6], "v": [1, 6], "where": [1, 2, 6], "residu": [1, 6], "sum": [1, 6], "squar": [1, 6], "y_true": [1, 6], "y_pred": [1, 6], "total": [1, 6], "best": [1, 6], "possibl": [1, 6, 7], "can": [1, 6, 7], "neg": [1, 6, 7], "becaus": [1, 6], "model": [1, 2, 3, 4, 5, 6, 7], "arbitrarili": [1, 6], "wors": [1, 6], "A": [1, 6, 7], "constant": [1, 6, 7], "alwai": [1, 6, 7], "expect": [1, 2, 3, 4, 6, 7], "disregard": [1, 6], "featur": [1, 6, 7], "would": [1, 6], "test": [1, 5, 6], "For": [1, 6, 7], "some": [1, 6, 7], "mai": [1, 6, 7], "precomput": [1, 6, 7], "kernel": [1, 6], "list": [1, 6], "gener": [1, 2, 3, 4, 6, 7], "n_samples_fit": [1, 6], "n_output": [1, 6], "w": [1, 2, 3, 6], "t": [1, 6], "call": [1, 6, 7], "regressor": [1, 6], "multioutput": [1, 6], "uniform_averag": [1, 6], "version": [1, 6, 7], "23": [1, 6], "keep": [1, 6], "consist": [1, 6], "r2_score": [1, 6], "influenc": [1, 6], "all": [1, 6], "except": [1, 6], "multioutputregressor": [1, 6], "set_fit_request": [1, 6, 7], "str": [1, 6, 7], "unchang": [1, 6, 7], "request": [1, 6, 7], "pass": [1, 6, 7], "relev": [1, 6, 7], "enable_metadata_rout": [1, 6, 7], "see": [1, 6, 7], "sklearn": [1, 6, 7], "set_config": [1, 6, 7], "pleas": [1, 6, 7], "user": [1, 6, 7], "guid": [1, 6, 7], "how": [1, 6, 7], "mechan": [1, 6, 7], "work": [1, 6, 7], "each": [1, 6, 7], "provid": [1, 6, 7], "meta": [1, 6, 7], "error": [1, 6, 7], "should": [1, 6, 7], "given": [1, 6, 7], "alia": [1, 6, 7], "origin": [1, 2, 3, 4, 6, 7], "util": [1, 6, 7], "metadata_rout": [1, 6, 7], "retain": [1, 6, 7], "exist": [1, 6, 7], "allow": [1, 6, 7], "you": [1, 6, 7], "chang": [1, 6, 7], "other": [1, 6, 7], "new": [1, 6, 7], "3": [1, 6, 7], "sub": [1, 6, 7], "e": [1, 2, 3, 6, 7], "g": [1, 6, 7], "insid": [1, 6, 7], "pipelin": [1, 6, 7], "otherwis": [1, 6, 7], "effect": [1, 6, 7], "updat": [1, 6, 7], "set_param": [1, 6, 7], "simpl": [1, 6, 7], "well": [1, 6, 7], "nest": [1, 6, 7], "latter": [1, 6, 7], "have": [1, 2, 6, 7], "form": [1, 2, 6, 7], "compon": [1, 6, 7], "__": [1, 6, 7], "so": [1, 6, 7], "": [1, 2, 3, 5, 6, 7], "instanc": [1, 6, 7], "set_predict_request": [1, 7], "set_score_request": [1, 6], "estimators_samples_": [1, 6], "subset": [1, 6], "drawn": [1, 6], "dynam": [1, 6], "indic": [1, 6], "identifi": [1, 6], "member": [1, 6], "re": [1, 6], "creat": [1, 6], "properti": [1, 6], "order": [1, 6], "reduc": [1, 6], "memori": [1, 6], "footprint": [1, 6], "store": [1, 6], "data": [1, 2, 3, 4, 6, 7], "thu": [1, 6], "fetch": [1, 6], "slower": [1, 6], "than": [1, 6, 7], "chol_i": [2, 3, 4, 5], "chol_ystar": [2, 3, 4, 5], "cov_y_ystar": [2, 3, 4, 5], "nboot": [2, 4], "100": [2, 3, 4, 6], "alpha": [2, 3, 4], "05": [2, 4], "full_refit": [2, 3], "use_trace_corr": [2, 3, 4], "cp": [2, 3, 4, 5], "adapt": 2, "linear": [2, 5], "smoother": 2, "mse": [2, 3, 4, 5], "must": [2, 7], "mathbb": 2, "n": [2, 3, 4, 5], "time": 2, "boolean": [2, 3, 4, 5], "index": [2, 3, 4, 5, 6], "which": [2, 3, 4, 5, 6], "sigma_i": [2, 3, 4, 5], "sigma_": [2, 3, 4, 5], "assum": [2, 3, 4, 5], "n_boot": [2, 4], "draw": [2, 4], "averag": [2, 4], "over": [2, 4, 7], "amount": [2, 4], "nois": [2, 3, 4], "elev": [2, 3, 4], "appli": [2, 4, 6], "To": [2, 4], "approxim": [2, 4], "small": [2, 4], "recommend": [2, 4], "refit": [2, 3], "determinist": [2, 3, 4], "trace": [2, 3, 4], "correct": [2, 3, 4], "random": [2, 3, 4, 7], "term": [2, 3, 4, 7], "same": [2, 3, 4], "yield": [2, 3, 4], "smaller": [2, 3, 4, 7], "varianc": [2, 3, 4], "err_est": [2, 3, 4, 5], "bag": [3, 6], "arbitrari": 4, "mallow": 5, "ani": [5, 6], "depend": 5, "type": 5, "criterion": 6, "squared_error": 6, "min_samples_split": 6, "min_samples_leaf": 6, "min_weight_fraction_leaf": 6, "max_leaf_nod": 6, "min_impurity_decreas": 6, "ccp_alpha": 6, "monotonic_cst": 6, "tree": [6, 7], "leaf": 6, "intern": 6, "its": 6, "dtype": 6, "convert": 6, "float32": 6, "csr_matrix": 6, "x_leav": 6, "datapoint": 6, "end": 6, "up": [6, 7], "decision_path": 6, "decis": 6, "path": 6, "18": 6, "n_node": 6, "node": 6, "non": [6, 7], "zero": 6, "element": 6, "goe": 6, "through": 6, "csr": 6, "format": 6, "n_nodes_ptr": 6, "column": 6, "give": 6, "th": 6, "csc_matrix": 6, "split": 6, "child": 6, "net": 6, "while": 6, "search": 6, "also": [6, 7], "result": 6, "singl": 6, "carri": 6, "either": 6, "chol": 6, "check": [6, 7], "metadatarequest": [6, 7], "encapsul": [6, 7], "inform": [6, 7], "feature_importances_": 6, "impur": 6, "import": 6, "higher": [6, 7], "more": 6, "normal": 6, "reduct": 6, "brought": 6, "It": 6, "known": 6, "gini": 6, "warn": 6, "mislead": 6, "high": 6, "cardin": 6, "mani": 6, "uniqu": 6, "inspect": 6, "permutation_import": 6, "altern": 6, "unless": 6, "root": 6, "lambd": 7, "fit_intercept": 7, "copy_x": 7, "max_it": 7, "1000": 7, "tol": 7, "0001": 7, "posit": 7, "select": 7, "cyclic": 7, "forest": 7, "multipli": 7, "l1": 7, "control": 7, "regular": 7, "strength": 7, "inf": 7, "whether": 7, "calcul": 7, "intercept": 7, "center": 7, "gram": 7, "speed": 7, "preserv": 7, "sparsiti": 7, "copi": 7, "els": 7, "overwritten": 7, "maximum": 7, "iter": 7, "toler": 7, "optim": 7, "code": 7, "dual": 7, "gap": 7, "continu": 7, "until": 7, "1e": 7, "4": 7, "reus": 7, "solut": 7, "previou": 7, "initi": 7, "just": 7, "eras": 7, "forc": 7, "seed": 7, "pseudo": 7, "reproduc": 7, "output": 7, "across": 7, "multipl": 7, "everi": 7, "rather": 7, "loop": 7, "sequenti": 7, "often": 7, "lead": 7, "significantli": 7, "faster": 7, "converg": 7, "especi": 7, "lasso_i": 7, "lin_i": 7, "fit_linear": 7}, "objects": {"spe.bagging": [[1, 0, 1, "", "ParametricBaggingRegressor"]], "spe.bagging.ParametricBaggingRegressor": [[1, 1, 1, "", "__init__"], [1, 2, 1, "", "estimators_samples_"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "get_group_X"], [1, 1, 1, "", "get_linear_smoother"], [1, 1, 1, "", "get_metadata_routing"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "predict"], [1, 1, 1, "", "score"], [1, 1, 1, "", "set_fit_request"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "set_predict_request"], [1, 1, 1, "", "set_score_request"]], "spe.estimators": [[2, 3, 1, "", "cp_adaptive_smoother"], [3, 3, 1, "", "cp_bagged"], [4, 3, 1, "", "cp_general"], [5, 3, 1, "", "cp_smoother"]], "spe.forest": [[6, 0, 1, "", "ParametricRandomForestRegressor"]], "spe.forest.ParametricRandomForestRegressor": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "apply"], [6, 1, 1, "", "decision_path"], [6, 2, 1, "", "estimators_samples_"], [6, 2, 1, "", "feature_importances_"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "get_group_X"], [6, 1, 1, "", "get_linear_smoother"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "predict"], [6, 1, 1, "", "score"], [6, 1, 1, "", "set_fit_request"], [6, 1, 1, "", "set_params"], [6, 1, 1, "", "set_score_request"]], "spe.relaxed_lasso": [[7, 0, 1, "", "RelaxedLasso"]], "spe.relaxed_lasso.RelaxedLasso": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_linear"], [7, 1, 1, "", "get_group_X"], [7, 1, 1, "", "get_linear_smoother"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "set_fit_request"], [7, 1, 1, "", "set_params"], [7, 1, 1, "", "set_predict_request"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "spe": [0, 1, 2, 3, 4, 5, 6, 7, 8], "bag": [0, 1], "estim": [0, 2, 3, 4, 5], "forest": [0, 6], "relaxed_lasso": [0, 7], "parametricbaggingregressor": 1, "cp_adaptive_smooth": 2, "cp_bag": 3, "cp_gener": 4, "cp_smoother": 5, "parametricrandomforestregressor": 6, "relaxedlasso": 7, "document": 8, "user": 9, "guid": 9}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "spe.bagging": [[0, "spe-bagging"]], "spe.estimators": [[0, "spe-estimators"]], "spe.forest": [[0, "spe-forest"]], "spe.relaxed_lasso": [[0, "spe-relaxed-lasso"]], "spe.bagging.ParametricBaggingRegressor": [[1, "spe-bagging-parametricbaggingregressor"]], "spe.estimators.cp_adaptive_smoother": [[2, "spe-estimators-cp-adaptive-smoother"]], "spe.estimators.cp_bagged": [[3, "spe-estimators-cp-bagged"]], "spe.estimators.cp_general": [[4, "spe-estimators-cp-general"]], "spe.estimators.cp_smoother": [[5, "spe-estimators-cp-smoother"]], "spe.forest.ParametricRandomForestRegressor": [[6, "spe-forest-parametricrandomforestregressor"]], "spe.relaxed_lasso.RelaxedLasso": [[7, "spe-relaxed-lasso-relaxedlasso"]], "SPE Documentation": [[8, "spe-documentation"]], "User Guide": [[9, "user-guide"]]}, "indexentries": {"parametricbaggingregressor (class in spe.bagging)": [[1, "spe.bagging.ParametricBaggingRegressor"]], "__init__() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.__init__"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor attribute)": [[1, "spe.bagging.ParametricBaggingRegressor.estimators_samples_"]], "fit() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.fit"]], "get_group_x() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_group_X"]], "get_linear_smoother() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_metadata_routing"]], "get_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_params"]], "predict() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.predict"]], "score() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.score"]], "set_fit_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_fit_request"]], "set_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_params"]], "set_predict_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_predict_request"]], "set_score_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_score_request"]], "cp_adaptive_smoother() (in module spe.estimators)": [[2, "spe.estimators.cp_adaptive_smoother"]], "cp_bagged() (in module spe.estimators)": [[3, "spe.estimators.cp_bagged"]], "cp_general() (in module spe.estimators)": [[4, "spe.estimators.cp_general"]], "cp_smoother() (in module spe.estimators)": [[5, "spe.estimators.cp_smoother"]], "parametricrandomforestregressor (class in spe.forest)": [[6, "spe.forest.ParametricRandomForestRegressor"]], "__init__() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.__init__"]], "apply() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.apply"]], "decision_path() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.decision_path"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.estimators_samples_"]], "feature_importances_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.feature_importances_"]], "fit() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.fit"]], "get_group_x() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_group_X"]], "get_linear_smoother() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_metadata_routing"]], "get_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_params"]], "predict() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.predict"]], "score() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.score"]], "set_fit_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_fit_request"]], "set_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_params"]], "set_score_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_score_request"]], "relaxedlasso (class in spe.relaxed_lasso)": [[7, "spe.relaxed_lasso.RelaxedLasso"]], "__init__() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.__init__"]], "fit() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit"]], "fit_linear() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit_linear"]], "get_group_x() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_group_X"]], "get_linear_smoother() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_linear_smoother"]], "get_metadata_routing() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_metadata_routing"]], "get_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_params"]], "predict() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.predict"]], "set_fit_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_fit_request"]], "set_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_params"]], "set_predict_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_predict_request"]]}})