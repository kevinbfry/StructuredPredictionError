Search.setIndex({"docnames": ["api_reference", "generated/spe.bagging.ParametricBaggingRegressor", "generated/spe.estimators.cp_adaptive_smoother", "generated/spe.estimators.cp_arbitrary", "generated/spe.estimators.cp_bagged", "generated/spe.estimators.cp_smoother", "generated/spe.forest.ParametricRandomForestRegressor", "generated/spe.relaxed_lasso.RelaxedLasso", "generated/spe.smoothers.BSplineRegressor", "generated/spe.smoothers.LinearRegression", "generated/spe.tree.AdaptiveLinearSmoother", "generated/spe.tree.Tree", "index", "notebooks/adaptive_linear", "notebooks/arbitrary", "notebooks/bagging", "notebooks/by_comps", "notebooks/cv_corrections", "notebooks/est_vs_oracle_cov", "notebooks/linear", "notebooks/motiv_ex", "notebooks/quickstart", "notebooks/rand_vs_trace", "notebooks/rf_comps", "user_guide"], "filenames": ["api_reference.rst", "generated/spe.bagging.ParametricBaggingRegressor.rst", "generated/spe.estimators.cp_adaptive_smoother.rst", "generated/spe.estimators.cp_arbitrary.rst", "generated/spe.estimators.cp_bagged.rst", "generated/spe.estimators.cp_smoother.rst", "generated/spe.forest.ParametricRandomForestRegressor.rst", "generated/spe.relaxed_lasso.RelaxedLasso.rst", "generated/spe.smoothers.BSplineRegressor.rst", "generated/spe.smoothers.LinearRegression.rst", "generated/spe.tree.AdaptiveLinearSmoother.rst", "generated/spe.tree.Tree.rst", "index.rst", "notebooks/adaptive_linear.ipynb", "notebooks/arbitrary.ipynb", "notebooks/bagging.ipynb", "notebooks/by_comps.ipynb", "notebooks/cv_corrections.ipynb", "notebooks/est_vs_oracle_cov.ipynb", "notebooks/linear.ipynb", "notebooks/motiv_ex.ipynb", "notebooks/quickstart.ipynb", "notebooks/rand_vs_trace.ipynb", "notebooks/rf_comps.ipynb", "user_guide.rst"], "titles": ["API Reference", "spe.bagging.ParametricBaggingRegressor", "spe.estimators.cp_adaptive_smoother", "spe.estimators.cp_arbitrary", "spe.estimators.cp_bagged", "spe.estimators.cp_smoother", "spe.forest.ParametricRandomForestRegressor", "spe.relaxed_lasso.RelaxedLasso", "spe.smoothers.BSplineRegressor", "spe.smoothers.LinearRegression", "spe.tree.AdaptiveLinearSmoother", "spe.tree.Tree", "SPE Documentation", "Adaptive Linear Smoothers", "Arbitrary Models", "Bagged Models", "Generalized BY Comparison", "Setup", "Estimated vs Oracle Covariance", "Linear Smoothers", "Simulate <span class=\"math notranslate nohighlight\">\\(Y, Y^* \\overset{iid}{\\sim} \\mathcal{N}(\\mu, \\Sigma_Y)\\)</span>", "Quickstart", "Trace Correction vs Random Correction", "Random Forest Comparisons", "User Guide"], "terms": {"class": [1, 6, 7, 8, 9, 10, 11], "estim": [1, 6, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 22, 23, 24], "none": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "n_estim": [1, 4, 6, 18], "10": [1, 6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "max_sampl": [1, 6], "1": [1, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "0": [1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23], "max_featur": [1, 6, 11, 15, 16, 23], "bootstrap": [1, 2, 3, 4, 6], "true": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23], "bootstrap_featur": 1, "fals": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "oob_scor": [1, 6], "warm_start": [1, 6, 7], "n_job": [1, 6, 9], "random_st": [1, 6, 7, 11], "verbos": [1, 6], "A": [1, 6, 7, 8, 9, 11], "regressor": [1, 6, 9, 11], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 22, 23], "an": [1, 2, 3, 4, 6, 7, 8, 9, 11], "ensembl": [1, 6, 18, 23], "meta": [1, 6, 7, 9, 11], "fit": [1, 4, 6, 7, 8, 9, 10, 11, 17], "base": [1, 4, 6, 11, 18], "each": [1, 6, 7, 8, 9, 11], "random": [1, 2, 3, 4, 6, 7, 11, 13, 14, 16, 18, 19, 20, 21, 24], "subset": [1, 6], "origin": [1, 2, 3, 4, 6, 7, 9, 11], "dataset": [1, 6, 11], "aggreg": 1, "individu": [1, 9], "predict": [1, 2, 4, 6, 7, 8, 9, 10, 11], "either": [1, 6, 11], "vote": 1, "averag": [1, 2, 3, 6], "form": [1, 2, 6, 7, 8, 9, 11], "final": 1, "Such": 1, "can": [1, 6, 7, 9, 11], "typic": 1, "us": [1, 2, 3, 4, 6, 7, 8, 9, 11, 21, 22], "wai": 1, "reduc": [1, 6, 11], "varianc": [1, 2, 3, 4, 6, 11, 22], "black": 1, "box": 1, "e": [1, 2, 4, 6, 7, 8, 9, 11], "g": [1, 6, 7, 9, 11], "decis": [1, 6, 11, 13, 16, 18, 21], "tree": [1, 6, 13, 15, 16, 18, 21, 23], "introduc": [1, 8], "its": [1, 6], "construct": 1, "procedur": 1, "make": [1, 8], "out": [1, 6], "thi": [1, 6, 7, 8, 9, 11, 17], "algorithm": [1, 11], "encompass": 1, "sever": [1, 6, 11], "work": [1, 6, 7, 8, 9, 11], "from": [1, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "literatur": 1, "when": [1, 6, 7, 9, 10, 11], "ar": [1, 2, 4, 6, 7, 8, 9, 11], "drawn": [1, 6], "sampl": [1, 2, 3, 4, 5, 6, 9, 11], "known": [1, 6, 11], "past": 1, "If": [1, 2, 3, 4, 6, 7, 8, 9, 11, 17], "replac": [1, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23], "method": [1, 6, 7, 8, 9, 10, 11], "2": [1, 6, 8, 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23], "featur": [1, 6, 7, 8, 9, 11], "subspac": 1, "3": [1, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "built": 1, "both": [1, 6, 7], "patch": 1, "4": [1, 6, 7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "addition": [1, 6, 7, 11], "gaussian": [1, 6], "parametr": [1, 6, 23], "subclass": [1, 6, 7, 10, 11], "adaptivelinearsmooth": [1, 6, 7, 8, 9, 11], "document": [1, 6, 7, 11], "heavili": [1, 6, 7, 11], "lift": [1, 6, 7, 11], "baggingregressor": 1, "which": [1, 2, 3, 4, 5, 6, 7, 11, 23], "inherit": [1, 6, 10, 11], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "object": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "default": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "The": [1, 2, 3, 4, 6, 7, 8, 9, 11], "decisiontreeregressor": [1, 6, 11, 16, 21], "int": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "number": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "float": [1, 2, 3, 4, 5, 6, 7, 9, 11], "draw": [1, 2, 3, 6], "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23], "train": [1, 2, 3, 4, 5, 6, 8, 9, 11, 15, 17, 23], "see": [1, 6, 7, 9, 11], "more": [1, 6, 11, 17], "detail": [1, 11], "shape": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "without": 1, "max": [1, 6, 8, 11], "n_features_in_": [1, 6, 11], "bool": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "whether": [1, 6, 7], "perform": [1, 2, 3, 6, 11, 17, 18], "gener": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 22, 23, 24], "error": [1, 6, 7, 8, 9, 11], "onli": [1, 6, 7, 8, 9, 11], "avail": [1, 6, 8], "set": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "reus": [1, 6, 7], "solut": [1, 6, 7], "previou": [1, 6, 7], "call": [1, 6, 7, 9, 11], "add": [1, 6], "otherwis": [1, 6, 7, 9, 11], "just": [1, 6, 7], "whole": [1, 6], "new": [1, 6, 7, 9, 11], "job": [1, 6], "run": [1, 6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "parallel": [1, 6], "mean": [1, 6, 9, 11], "unless": [1, 6, 11], "joblib": [1, 6], "parallel_backend": [1, 6], "context": [1, 6], "all": [1, 6, 9, 10, 11, 17], "processor": [1, 6], "randomst": [1, 6, 11], "instanc": [1, 6, 7, 8, 9, 10, 11], "control": [1, 6, 7, 8, 11], "resampl": 1, "wise": 1, "accept": 1, "attribut": [1, 6, 11], "differ": [1, 11], "seed": [1, 7, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "pass": [1, 6, 7, 9, 11], "reproduc": [1, 7], "output": [1, 6, 7, 8, 9, 10, 11], "across": [1, 7, 11], "multipl": [1, 7], "function": [1, 6, 7, 8, 11], "baggingclassifi": 1, "classifi": [1, 11], "refer": [1, 6, 11], "l": [1, 6, 11], "breiman": [1, 6, 11], "small": [1, 2, 3], "classif": [1, 6, 11], "larg": [1, 6, 11], "databas": 1, "line": 1, "machin": [1, 6], "learn": [1, 6, 11], "36": 1, "85": 1, "103": 1, "1999": 1, "predictor": 1, "24": [1, 18, 22], "123": 1, "140": 1, "1996": 1, "t": [1, 6, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ho": 1, "forest": [1, 11, 15, 18, 24], "pattern": 1, "analysi": 1, "intellig": 1, "20": [1, 17, 18, 22, 23], "8": [1, 6, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "832": 1, "844": 1, "1998": 1, "loupp": 1, "p": [1, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "geurt": [1, 6], "knowledg": 1, "discoveri": 1, "346": 1, "361": 1, "2012": 1, "exampl": [1, 6, 8, 11, 20], "sklearn": [1, 6, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "svm": 1, "import": [1, 6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "svr": 1, "make_regress": [1, 6], "y": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 23], "n_sampl": [1, 2, 3, 4, 5, 6, 9, 11], "100": [1, 2, 3, 4, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "n_featur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "n_inform": [1, 6], "n_target": [1, 9], "shuffl": [1, 6, 15], "regr": [1, 6], "arrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 21], "8720": 1, "estimator_": [1, 6], "grown": [1, 6, 11], "seen": [1, 6, 11], "dure": [1, 6, 11], "feature_names_in_": [1, 6, 11], "ndarrai": [1, 6, 11], "name": [1, 6, 7, 8, 9, 11], "defin": [1, 6, 9, 11], "ha": [1, 6, 7, 9, 11], "string": [1, 6, 11, 17], "estimators_": [1, 6], "list": [1, 6, 9, 11], "collect": [1, 6], "sub": [1, 6, 7, 9, 11], "estimators_samples_": [1, 6], "estimators_features_": 1, "oob_score_": [1, 6], "score": [1, 6, 9, 11], "obtain": [1, 6, 11], "exist": [1, 6, 7, 9, 11], "oob_prediction_": [1, 6], "comput": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "might": 1, "possibl": [1, 6, 7, 8, 9, 11], "data": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "point": [1, 6, 8, 11, 17], "wa": [1, 6, 17], "never": 1, "left": [1, 6, 11], "In": [1, 6, 8], "case": [1, 2, 3, 4, 5, 6, 8, 11], "contain": [1, 6, 7, 8, 9, 11], "nan": 1, "__init__": [1, 6, 7, 8, 9, 10, 11], "max_depth": [1, 6, 11, 13, 15, 16, 18, 21, 23], "sample_weight": [1, 6, 7, 9, 11], "check_input": [1, 7, 11], "chol_ep": [1, 6], "do_param_boot": [1, 6], "build": [1, 6, 11], "like": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 17], "spars": [1, 6, 7, 8, 9, 11], "matrix": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18], "input": [1, 6, 7, 8, 9, 10, 11], "matric": 1, "thei": [1, 6, 8, 11], "support": [1, 6, 9, 11], "target": [1, 6, 9, 11], "valu": [1, 2, 3, 6, 7, 8, 9, 11, 17], "label": [1, 6, 11], "real": [1, 6, 11], "regress": [1, 6, 7, 8, 11, 19, 20], "argument": [1, 7], "instead": [1, 6, 7, 9, 11], "self": [1, 6, 7, 8, 9, 11], "overrid": 1, "weight": [1, 6, 9, 11], "equal": [1, 6, 8, 11], "note": [1, 6, 7, 8, 9, 11], "option": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "choleski": [1, 2, 3, 4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "covari": [1, 2, 3, 4, 5, 6, 24], "ignor": [1, 6, 7, 8, 9, 11], "np": [1, 2, 3, 4, 5, 6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ey": [1, 2, 3, 4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 17], "get_linear_smooth": [1, 6, 7, 8, 9, 10, 11], "tr_idx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ts_idx": [1, 6, 7, 8, 9, 10, 11, 17], "ret_full_p": [1, 6, 7, 8, 9, 11], "get": [1, 6, 7, 8, 9, 10, 11, 17], "adapt": [1, 2, 6, 7, 8, 9, 10, 11, 24], "linear": [1, 2, 5, 6, 7, 8, 9, 10, 11, 17, 20, 24], "smoother": [1, 2, 6, 7, 10, 11, 20, 24], "": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "w": [1, 2, 4, 6, 7, 8, 9, 10, 11, 22], "get_metadata_rout": [1, 6, 7, 8, 9, 11], "rais": [1, 6, 7, 8, 9, 11], "notimplementederror": 1, "doe": [1, 6, 11], "metadata": [1, 6, 7, 8, 9, 11], "rout": [1, 6, 7, 8, 9, 11], "yet": 1, "get_param": [1, 6, 7, 8, 9, 11], "deep": [1, 6, 7, 8, 9, 11], "subobject": [1, 6, 7, 8, 9, 11], "param": [1, 6, 7, 8, 9, 11], "dict": [1, 6, 7, 8, 9, 11], "map": [1, 6, 7, 8, 9, 11], "y_refit": [1, 6, 7, 9, 10, 11], "y_": [1, 6, 7, 8, 9, 10, 11], "refit": [1, 2, 4, 6, 7, 8, 9, 10, 11], "smooth": [1, 6, 7, 8, 9, 10, 11], "where": [1, 2, 6, 7, 8, 9, 10, 11, 17], "coeffici": [1, 6, 7, 9, 11], "determin": [1, 6, 9, 11], "r": [1, 2, 6, 9, 11], "frac": [1, 6, 9, 11], "u": [1, 6, 9, 11, 17], "v": [1, 6, 9, 11, 24], "residu": [1, 6, 9, 11], "sum": [1, 6, 8, 9, 11, 17], "squar": [1, 6, 9, 11], "y_true": [1, 6, 9, 11], "y_pred": [1, 6, 9, 11], "total": [1, 6, 9, 11], "best": [1, 6, 9, 11], "neg": [1, 6, 7, 8, 9, 11], "becaus": [1, 6, 9, 11], "model": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 19, 20, 22, 23, 24], "arbitrarili": [1, 6, 9, 11], "wors": [1, 6, 9, 11], "constant": [1, 6, 7, 8, 9, 11], "alwai": [1, 6, 7, 9, 11], "expect": [1, 2, 3, 4, 6, 7, 9, 11], "disregard": [1, 6, 9, 11], "would": [1, 6, 9, 11, 17], "test": [1, 5, 6, 9, 11, 15, 17, 21, 23], "For": [1, 6, 7, 8, 9, 11], "some": [1, 6, 7, 9, 11], "mai": [1, 6, 7, 8, 9, 11], "precomput": [1, 6, 7, 9, 11], "kernel": [1, 6, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "n_samples_fit": [1, 6, 9, 11], "n_output": [1, 6, 9, 11], "multioutput": [1, 6, 9, 11], "uniform_averag": [1, 6, 9, 11], "version": [1, 6, 7, 9, 11, 16], "23": [1, 6, 9, 11, 18], "keep": [1, 6, 9, 11], "consist": [1, 6, 9, 11], "r2_score": [1, 6, 9, 11], "influenc": [1, 6, 9, 11], "except": [1, 6, 9, 11], "multioutputregressor": [1, 6, 9, 11], "set_fit_request": [1, 6, 7, 9, 11], "str": [1, 6, 7, 9, 11], "unchang": [1, 6, 7, 9, 11], "request": [1, 6, 7, 9, 11], "relev": [1, 6, 7, 9, 11], "enable_metadata_rout": [1, 6, 7, 9, 11], "set_config": [1, 6, 7, 9, 11], "pleas": [1, 6, 7, 8, 9, 11, 17], "user": [1, 6, 7, 8, 9, 11], "guid": [1, 6, 7, 8, 9, 11], "how": [1, 6, 7, 8, 9, 11], "mechan": [1, 6, 7, 8, 9, 11], "provid": [1, 6, 7, 9, 11, 17], "should": [1, 6, 7, 9, 10, 11], "given": [1, 6, 7, 8, 9, 11], "alia": [1, 6, 7, 9, 11], "util": [1, 6, 7, 9, 11], "metadata_rout": [1, 6, 7, 9, 11], "retain": [1, 6, 7, 9, 11], "allow": [1, 6, 7, 9, 11, 17], "you": [1, 6, 7, 9, 11, 17], "chang": [1, 6, 7, 9, 11], "other": [1, 6, 7, 9, 11, 17], "insid": [1, 6, 7, 8, 9, 11], "pipelin": [1, 6, 7, 8, 9, 11], "effect": [1, 6, 7, 9, 11, 13, 14, 15, 18, 19], "updat": [1, 6, 7, 8, 9, 11], "set_param": [1, 6, 7, 8, 9, 11], "simpl": [1, 6, 7, 8, 9, 11, 20], "well": [1, 6, 7, 8, 9, 11], "nest": [1, 6, 7, 8, 9, 11], "latter": [1, 6, 7, 8, 9, 11], "have": [1, 2, 6, 7, 8, 9, 10, 11], "compon": [1, 6, 7, 8, 9, 11], "__": [1, 6, 7, 8, 9, 11], "so": [1, 6, 7, 8, 9, 11], "set_predict_request": [1, 6, 7, 9, 11], "set_score_request": [1, 6, 9, 11], "dynam": [1, 6], "indic": [1, 6, 11], "identifi": [1, 6], "member": [1, 6], "re": [1, 6, 11], "creat": [1, 6, 11], "properti": [1, 6], "order": [1, 6, 8, 11, 17], "memori": [1, 6, 11], "footprint": [1, 6], "store": [1, 6], "thu": [1, 6], "fetch": [1, 6], "slower": [1, 6], "than": [1, 6, 7, 11], "chol_i": [2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "chol_ystar": [2, 3, 4, 5, 13, 14, 15, 16, 18, 19, 20, 22, 23], "cov_y_ystar": [2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "nboot": [2, 3, 13, 14, 16, 18, 19, 20, 22], "alpha": [2, 3, 4, 11, 13, 14, 15, 16, 18, 21, 22, 23], "05": [2, 3, 13, 14, 16, 18, 20, 21, 22], "full_refit": [2, 4, 10, 13, 14, 15, 16, 18, 22, 23], "use_trace_corr": [2, 3, 4, 13, 14, 15, 16, 18, 21, 22, 23], "mallow": [2, 3, 4, 5], "cp": [2, 3, 4, 5], "mse": [2, 3, 4, 5, 13, 14, 15, 16, 19, 23], "must": [2, 7, 8], "mathbb": 2, "n": [2, 3, 4, 5, 6, 11, 17, 22, 23], "time": 2, "boolean": [2, 3, 4, 5], "index": [2, 3, 4, 5, 6, 11], "sigma_i": [2, 3, 4, 5, 17, 22], "sigma_": [2, 3, 4, 5, 22], "assum": [2, 3, 4, 5, 17], "n_boot": [2, 3], "over": [2, 3, 6, 7, 8], "amount": [2, 3], "nois": [2, 3, 4, 13, 19], "elev": [2, 3, 4], "appli": [2, 3, 6, 11], "To": [2, 3, 6, 11], "approxim": [2, 3], "recommend": [2, 3, 8], "determinist": [2, 3, 4, 6, 11, 22], "trace": [2, 3, 4, 24], "correct": [2, 3, 4, 24], "term": [2, 3, 4, 7, 8, 17], "same": [2, 3, 4, 6, 8], "yield": [2, 3, 4], "smaller": [2, 3, 4, 6, 7, 11], "err_est": [2, 3, 4, 5], "arbitrari": [3, 8, 24], "bag": [4, 6, 24], "ani": [5, 6, 11], "depend": [5, 17], "type": [5, 17, 20], "criterion": [6, 11], "squared_error": [6, 11], "min_samples_split": [6, 11], "min_samples_leaf": [6, 11], "min_weight_fraction_leaf": [6, 11], "max_leaf_nod": [6, 11], "min_impurity_decreas": [6, 11], "ccp_alpha": [6, 11], "monotonic_cst": [6, 11], "variou": 6, "improv": [6, 11], "accuraci": 6, "split": [6, 11, 17, 23], "strategi": [6, 11], "equival": 6, "splitter": [6, 11], "underli": [6, 11], "size": [6, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23], "randomforestregressor": [6, 18, 23], "22": [6, 22], "absolute_error": [6, 11], "friedman_ms": [6, 11], "poisson": [6, 11], "measur": [6, 11], "qualiti": [6, 11, 18], "criteria": [6, 11], "reduct": [6, 11, 22], "select": [6, 7, 11], "minim": [6, 11], "l2": [6, 11], "loss": [6, 11], "termin": [6, 11], "node": [6, 11], "friedman": [6, 11], "potenti": [6, 11], "absolut": [6, 11], "l1": [6, 7, 11], "median": [6, 11], "devianc": [6, 11], "find": [6, 11], "significantli": [6, 7], "maximum": [6, 7, 8, 11, 17], "depth": [6, 11, 16], "expand": [6, 8, 11], "until": [6, 7, 11], "leav": [6, 11], "pure": [6, 11], "less": [6, 11], "minimum": [6, 8, 11], "requir": [6, 11, 17], "intern": [6, 8, 11], "consid": [6, 11], "fraction": [6, 11], "ceil": [6, 11], "leaf": [6, 11], "least": [6, 11], "right": [6, 11], "branch": [6, 11], "especi": [6, 7, 11], "sqrt": [6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "log2": [6, 11], "look": [6, 11], "achiev": 6, "search": [6, 11], "stop": [6, 11], "one": [6, 8, 11], "valid": [6, 10, 11], "partit": [6, 11], "found": [6, 11, 17], "even": [6, 11], "inspect": [6, 11], "grow": [6, 11], "first": [6, 8, 11], "fashion": [6, 11], "rel": [6, 11], "impur": [6, 11], "unlimit": [6, 11], "induc": [6, 11], "decreas": [6, 11], "greater": [6, 11], "equat": [6, 11], "follow": [6, 11], "n_t": [6, 11], "n_t_r": [6, 11], "right_impur": [6, 11], "n_t_l": [6, 11], "left_impur": [6, 11], "current": [6, 11], "child": [6, 11], "callabl": 6, "By": [6, 11], "signatur": 6, "metric": 6, "custom": 6, "decision_path": [6, 11], "non": [6, 7, 8, 11, 23], "complex": [6, 11], "cost": [6, 11], "prune": [6, 11], "subtre": [6, 11], "largest": [6, 11], "chosen": [6, 11], "round": 6, "interv": 6, "monoton": [6, 11], "constraint": [6, 11], "enforc": [6, 8, 10, 11], "increas": [6, 11], "n_outputs_": [6, 11], "miss": [6, 11], "extratreesregressor": 6, "extrem": 6, "histgradientboostingregressor": 6, "histogram": 6, "gradient": 6, "boost": 6, "veri": [6, 11], "fast": 6, "big": 6, "10_000": 6, "etc": [6, 11], "lead": [6, 7, 11], "fulli": [6, 11], "unprun": [6, 11], "consumpt": [6, 11], "those": [6, 11], "randomli": [6, 11], "permut": [6, 11], "therefor": 6, "vari": [6, 11], "ident": [6, 11], "enumer": 6, "behaviour": [6, 11], "fix": [6, 11], "rather": [6, 7], "suggest": 6, "wherea": 6, "former": 6, "recent": 6, "justifi": 6, "empir": 6, "45": [6, 18], "5": [6, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "32": [6, 13], "2001": 6, "d": [6, 17], "ernst": 6, "wehenkel": 6, "63": 6, "42": [6, 18], "2006": 6, "print": [6, 17], "32987858": 6, "templat": 6, "feature_importances_": [6, 11], "dtype": [6, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23], "convert": [6, 11], "float32": [6, 11], "csr_matrix": [6, 11], "x_leav": [6, 11], "datapoint": [6, 11], "end": [6, 11], "up": [6, 7, 11], "path": [6, 11], "18": [6, 11, 18, 22], "n_node": [6, 11], "zero": [6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "element": [6, 8, 11], "goe": [6, 11], "through": [6, 11], "csr": [6, 8, 11], "format": 6, "n_nodes_ptr": 6, "column": [6, 8], "give": 6, "th": 6, "csc_matrix": [6, 11], "net": [6, 11], "while": [6, 11], "also": [6, 7, 11], "result": [6, 11], "singl": [6, 11], "carri": [6, 11], "get_group_x": [6, 8, 9, 11], "chol": 6, "check": [6, 7, 8, 9, 11], "metadatarequest": [6, 7, 8, 9, 11], "encapsul": [6, 7, 8, 9, 11], "inform": [6, 7, 8, 9, 11], "higher": [6, 7], "normal": [6, 11], "brought": [6, 11], "It": [6, 8, 11], "gini": [6, 11], "warn": [6, 11], "mislead": [6, 11], "high": [6, 11], "cardin": [6, 11], "mani": [6, 11], "uniqu": [6, 11], "permutation_import": [6, 11], "altern": [6, 11], "root": [6, 11], "lambd": [7, 13, 15, 18], "fit_intercept": [7, 9, 19, 20], "copy_x": [7, 9], "max_it": 7, "1000": 7, "tol": 7, "0001": 7, "posit": [7, 8, 9], "cyclic": 7, "relax": [7, 13, 15], "lasso": [7, 13, 14, 15, 22], "usual": [7, 11, 23], "unpen": 7, "linearregress": [7, 19, 20], "multipli": 7, "regular": 7, "strength": 7, "inf": 7, "calcul": 7, "intercept": [7, 8], "center": 7, "gram": 7, "speed": 7, "preserv": 7, "sparsiti": 7, "copi": 7, "els": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "overwritten": 7, "iter": 7, "toler": 7, "optim": 7, "code": 7, "dual": 7, "gap": [7, 11], "continu": [7, 8], "1e": [7, 17], "initi": 7, "eras": 7, "forc": 7, "pseudo": 7, "everi": 7, "loop": 7, "sequenti": 7, "often": 7, "faster": [7, 8], "converg": 7, "lasso_i": 7, "lin_i": 7, "fit_linear": 7, "get_selected_x": 7, "n_knot": 8, "degre": 8, "knot": 8, "uniform": [8, 13, 14, 17, 18, 19, 20, 21, 22, 23], "extrapol": 8, "include_bia": 8, "c": [8, 11], "sparse_output": 8, "bspline": 8, "b": [8, 21], "spline": [8, 19], "quantil": 8, "larger": 8, "polynomi": 8, "basi": 8, "integ": [8, 11], "last": 8, "distribut": 8, "uniformli": 8, "min": 8, "along": 8, "directli": 8, "specifi": 8, "sort": 8, "includ": 8, "boundari": 8, "ad": 8, "befor": [8, 11], "after": 8, "period": 8, "outsid": 8, "valueerror": 8, "scipi": 8, "interpol": 8, "distanc": [8, 11], "between": [8, 11], "deriv": 8, "avoid": 8, "jump": 8, "dec": 8, "31st": 8, "jan": 8, "1st": 8, "natur": 8, "dai": 8, "year": 8, "manual": 8, "rang": [8, 17], "drop": 8, "As": 8, "implicitli": 8, "bia": [8, 17], "ones": [8, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23], "act": 8, "f": 8, "dens": 8, "slow": 8, "down": 8, "subsequ": 8, "Will": [8, 9], "x_pred": [8, 9], "cast": 9, "necessari": [9, 10], "17": [9, 11, 15, 18, 22], "abc": 10, "cp_adaptive_smooth": [10, 13], "cp_bag": [10, 15, 23], "arg": 10, "kwarg": 10, "abstract": 10, "choos": 11, "among": 11, "them": 11, "But": 11, "That": 11, "decisiontreeclassifi": 11, "http": [11, 17], "en": 11, "wikipedia": 11, "org": 11, "wiki": 11, "decision_tree_learn": 11, "j": 11, "olshen": 11, "stone": 11, "wadsworth": 11, "belmont": 11, "ca": 11, "1984": 11, "hasti": 11, "tibshirani": 11, "statist": 11, "springer": 11, "2009": 11, "cutler": 11, "www": 11, "stat": 11, "berkelei": 11, "edu": 11, "randomforest": 11, "cc_home": 11, "htm": 11, "load_diabet": 11, "model_select": 11, "cross_val_scor": 11, "return_x_i": 11, "cv": [11, 14, 18, 22], "39": 11, "46": [11, 13, 15, 16], "02": [11, 14, 18, 20], "06": [11, 17, 18, 19, 22], "50": [11, 17], "16": [11, 14, 15, 18, 20], "11": [11, 13, 14, 15, 16, 17, 18, 19, 20, 22], "73": 11, "30": [11, 16, 21, 23], "00": [11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "max_features_": 11, "infer": 11, "tree_": 11, "help": 11, "_tree": 11, "sphx_glr_auto_examples_tree_plot_unveil_tree_structur": 11, "py": [11, 17], "basic": [11, 21], "usag": 11, "bypass": 11, "don": 11, "know": 11, "what": 11, "do": 11, "within": 11, "node_count": 11, "possibli": 11, "cost_complexity_pruning_path": 11, "minimal_cost_complexity_prun": 11, "process": 11, "ccp_path": 11, "bunch": 11, "dictionari": 11, "correspond": 11, "float64": 11, "effici": 11, "get_depth": 11, "get_n_leav": 11, "n_leav": 11, "numpi": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gaussian_process": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "matern": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "rbf": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "plotli": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "doc": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "mse_estim": [13, 14, 15, 16, 18, 19, 20, 22, 23], "errorcompar": [13, 14, 15, 16, 18, 19, 20, 22, 23], "data_gener": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gen_rbf_x": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gen_matern_x": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gen_cov_mat": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "plotting_util": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gen_model_barplot": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "spe": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23], "relaxed_lasso": [13, 15], "relaxedlasso": [13, 15], "kfoldcv": [13, 14, 18, 19, 20], "kmeanscv": [13, 14, 18, 19, 20], "new_y_est": [13, 14, 15, 16, 18, 19, 20, 22, 23], "here": [13, 14, 15, 16, 18, 19, 21, 23], "we": [13, 14, 15, 16, 18, 19, 21, 23], "demonstr": [13, 14, 15, 19], "realiz": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "niter": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gsize": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "200": [13, 14, 16, 22], "delta": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "75": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "snr": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "tr_frac": [13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "noise_kernel": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "noise_length_scal": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "noise_nu": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "x_kernel": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "x_length_scal": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "x_nu": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "k": [13, 14, 15, 16, 17, 18, 19, 20], "31": [13, 14, 15, 18], "est": [13, 14, 15, 16, 18, 19, 20, 22, 23], "est_kwarg": [13, 14, 15, 16, 18, 19, 20, 22, 23], "plot": [13, 14, 15, 16, 19, 20, 21, 22, 23], "model_nam": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23], "est_nam": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "gencp": [13, 14, 15, 16, 19, 20, 21], "kfcv": [13, 14, 17, 18, 19, 20, 21], "spcv": [13, 14, 17, 18, 19, 20, 21], "err_cmp": [13, 14, 15, 16, 18, 19, 20, 22, 23], "nx": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ny": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "linspac": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "c_x": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "c_y": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "meshgrid": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "flatten": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "coord": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "stack": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "6": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "sigma_t": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23], "length_scal": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "elif": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "nu": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "linalg": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "7": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "randn": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "beta": [13, 14, 16, 17, 18, 19, 20, 21, 22, 23], "idx": [13, 14, 16, 17, 18, 19, 20, 21, 22, 23], "choic": [13, 14, 16, 17, 18, 19, 20, 21, 22, 23], "9": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "model_err": [13, 14, 18, 19, 20, 22, 23], "err": [13, 14, 15, 16, 18, 19, 20, 22, 23], "compar": [13, 14, 15, 16, 18, 19, 20, 22, 23], "fair": [13, 14, 15, 16, 18, 19, 20, 22, 23], "est_sigma": [13, 14, 16, 18, 19, 20], "append": [13, 14, 15, 16, 18, 19, 20, 22, 23], "lt": [13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "07it": 13, "01": [13, 14, 15, 18, 22, 23], "41it": 13, "offlin": [13, 14, 15, 16, 18, 19, 21, 22, 23], "init_notebook_mod": [13, 14, 15, 16, 18, 19, 21, 22, 23], "fig": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "titl": [13, 14, 15, 16, 17, 18, 19, 20, 22, 23], "No": [13, 19], "share": [13, 19], "has_elev_err": [13, 14, 16, 17, 21, 22], "show": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "corr_model_err": [13, 14, 18, 19, 20, 22], "14it": 13, "19": [13, 15, 17, 20, 23], "26it": 13, "12": [13, 15, 16, 17, 18, 19, 22], "corr_fig": [13, 14, 18, 19, 22], "structur": [13, 19], "linear_model": [14, 18, 22], "lassocv": [14, 22], "ridgecv": [14, 18, 22], "cp_arbitrari": [14, 16, 18, 21, 22], "lambda": [14, 22], "logspac": [14, 22], "ridg": [14, 18, 22], "01it": [14, 15], "03": [14, 18, 19, 22, 23], "86": 14, "54": [14, 15], "34": [14, 18], "13": [14, 15, 16, 17, 18, 19, 22], "nsn": [14, 15, 18, 20, 22], "err_bar": [14, 16, 17, 18, 22, 23], "fig_nam": [14, 15, 16, 18, 20, 23], "arb_ind": 14, "37": 14, "68it": [14, 15], "53": 14, "74": 14, "57": 14, "77": 14, "14": [14, 15, 18], "ssn": [14, 15, 16, 18, 20, 22, 23], "arb_corr": 14, "express": [15, 16, 17, 18, 20, 22, 23], "px": [15, 16, 17, 18, 20, 22, 23], "create_clus_split": [15, 17], "simple_train_test_split": 15, "25": [15, 16, 18, 19, 20, 22], "bagg": 15, "spat_ind_model_err": 15, "friedman_mu": 15, "28": 15, "54it": 15, "02it": [15, 18], "spat_fig": 15, "color_discrete_sequ": [15, 16, 17, 18, 22, 23], "color": [15, 16, 17, 18, 22, 23], "qualit": [15, 16, 17, 18, 22, 23], "bold": [15, 16, 17, 18, 22, 23], "bag_spat_ind": 15, "spat_corr_model_err": 15, "85it": 15, "16it": 15, "spat_corr_fig": 15, "bag_spat_corr": 15, "concaten": 15, "astyp": 15, "trts_ind_model_err": 15, "33": 15, "21": [15, 17, 18], "15": [15, 17, 18, 19, 22], "bag_trts_ind": 15, "trts_corr_model_err": 15, "09": 15, "44it": 15, "62it": 15, "trts_corr_fig": 15, "bag_trts_corr": 15, "by_spati": 16, "sigma_x": 16, "chol_x": 16, "x_spike": 16, "x_iso": 16, "sigma_x_less": 16, "chol_x_less": 16, "x_less": 16, "spike_model_err": 16, "47": 16, "12it": 16, "iid_model_err": 16, "15it": 16, "corr": [16, 17, 22], "iid": 16, "by_comp": 16, "panda": 17, "pd": 17, "kmean": 17, "matplotlib": 17, "pyplot": 17, "plt": 17, "tqdm": 17, "var": [17, 22], "folder": 17, "s3csl9g94gx2ptsgwz8cpfvh0000gn": 17, "ipykernel_72302": 17, "1955058804": 17, "deprecationwarn": 17, "pyarrow": 17, "becom": 17, "next": 17, "major": 17, "releas": 17, "arrow": 17, "better": 17, "interoper": 17, "librari": 17, "instal": 17, "your": 17, "system": 17, "caus": 17, "problem": 17, "feedback": 17, "github": 17, "com": 17, "dev": 17, "issu": 17, "54466": 17, "60": 17, "bloo_radiu": 17, "bloocv": 17, "def": 17, "gen_x": 17, "std": 17, "approx": 17, "computecorrect": 17, "sigma": 17, "diag": 17, "getdist": 17, "loc": 17, "m": 17, "axi": 17, "dot": 17, "sometim": 17, "getbuffertrain": 17, "tr_bool": 17, "buffer_tr_bool": 17, "kfcv_corr": 17, "spcv_corr": 17, "bloocv_corr": 17, "ns_corr": 17, "sp_corr": 17, "cv_tr_idx": 17, "cv_tr_bool": 17, "cv_ts_idx": 17, "cv_ts_bool": 17, "ts_bool": 17, "group": 17, "n_init": 17, "n_cluster": 17, "labels_": 17, "spcv_tr_idx": 17, "spcv_tr_bool": 17, "spcv_ts_idx": 17, "spcv_ts_bool": 17, "pick": 17, "tr": [17, 22], "far": 17, "enough": 17, "awai": 17, "bloocv_tr_idx": 17, "len": 17, "bloocv_ts_idx": 17, "bloocv_tr_bool": 17, "bloocv_ts_bool": 17, "x_cv": 17, "s_cv": 17, "pinv": 17, "x_spcv": 17, "s_spcv": 17, "x_bloocv": 17, "s_bloocv": 17, "x_tr": 17, "s_tr": 17, "sp_idx": 17, "sp_bool": 17, "s_sp": 17, "datafram": 17, "29it": 17, "ol": [17, 20], "comparison": [17, 20, 24], "cannot": [17, 20], "displai": [17, 20], "applic": [17, 20], "vnd": [17, 20], "v1": [17, 20], "json": [17, 20], "clus_kfcv_corr": 17, "clus_spcv_corr": 17, "clus_bloocv_corr": 17, "clus_ns_corr": 17, "clus_sp_corr": 17, "ngrid": 17, "ts_frac": 17, "sort_grid": 17, "clus_corr": 17, "48it": 17, "spatial": [17, 23], "investig": 18, "ogencp": 18, "egencp": 18, "true_model_err": 18, "piecewise_const_mu": 18, "27": [18, 19], "67it": [18, 20], "04": 18, "70it": 18, "09it": 18, "clone": 18, "est_sigma_model": 18, "35": 18, "43": 18, "comb_err": 18, "true_err": 18, "zip": 18, "importlib": [18, 23], "reload": [18, 23], "est_cov_ind": 18, "true_corr_model_err": 18, "07": 18, "71it": 18, "corr_resp": 18, "40": 18, "61": 18, "44": 18, "comb_errs_corr": 18, "est_cov_corr": 18, "cp_smoother": [19, 20], "bsplineregressor": 19, "73it": 19, "32it": [19, 20], "08": 19, "37it": 19, "99it": 19, "49": 20, "38": [20, 22], "23it": 20, "independ": 20, "correl": 20, "motiv_ex": 20, "ind_est": 21, "4930723502728087": 21, "corr_est": 21, "6283975002810962": 21, "has_test_risk": [21, 23], "simul": 22, "mathrm": 22, "theta_p": 22, "perp": 22, "omega": 22, "_2": 22, "rand": 22, "82": 22, "56": 22, "chol_y_ystar": 22, "parametricrandomforestregressor": 23, "rf": 23, "technic": 23, "blur": 23, "nprf": 23, "prf": 23, "gencpprf": 23, "59it": 23, "pastel": 23, "p_vs_np_rf": 23, "quickstart": 24, "oracl": 24, "BY": 24}, "objects": {"spe.bagging": [[1, 0, 1, "", "ParametricBaggingRegressor"]], "spe.bagging.ParametricBaggingRegressor": [[1, 1, 1, "", "__init__"], [1, 2, 1, "", "estimators_samples_"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "get_linear_smoother"], [1, 1, 1, "", "get_metadata_routing"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "predict"], [1, 1, 1, "", "score"], [1, 1, 1, "", "set_fit_request"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "set_predict_request"], [1, 1, 1, "", "set_score_request"]], "spe.estimators": [[2, 3, 1, "", "cp_adaptive_smoother"], [3, 3, 1, "", "cp_arbitrary"], [4, 3, 1, "", "cp_bagged"], [5, 3, 1, "", "cp_smoother"]], "spe.forest": [[6, 0, 1, "", "ParametricRandomForestRegressor"]], "spe.forest.ParametricRandomForestRegressor": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "apply"], [6, 1, 1, "", "decision_path"], [6, 2, 1, "", "estimators_samples_"], [6, 2, 1, "", "feature_importances_"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "get_group_X"], [6, 1, 1, "", "get_linear_smoother"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "predict"], [6, 1, 1, "", "score"], [6, 1, 1, "", "set_fit_request"], [6, 1, 1, "", "set_params"], [6, 1, 1, "", "set_predict_request"], [6, 1, 1, "", "set_score_request"]], "spe.relaxed_lasso": [[7, 0, 1, "", "RelaxedLasso"]], "spe.relaxed_lasso.RelaxedLasso": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_linear"], [7, 1, 1, "", "get_linear_smoother"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "get_selected_X"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "set_fit_request"], [7, 1, 1, "", "set_params"], [7, 1, 1, "", "set_predict_request"]], "spe.smoothers": [[8, 0, 1, "", "BSplineRegressor"], [9, 0, 1, "", "LinearRegression"]], "spe.smoothers.BSplineRegressor": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "get_group_X"], [8, 1, 1, "", "get_linear_smoother"], [8, 1, 1, "", "get_metadata_routing"], [8, 1, 1, "", "get_params"], [8, 1, 1, "", "predict"], [8, 1, 1, "", "set_params"]], "spe.smoothers.LinearRegression": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "fit"], [9, 1, 1, "", "get_group_X"], [9, 1, 1, "", "get_linear_smoother"], [9, 1, 1, "", "get_metadata_routing"], [9, 1, 1, "", "get_params"], [9, 1, 1, "", "predict"], [9, 1, 1, "", "score"], [9, 1, 1, "", "set_fit_request"], [9, 1, 1, "", "set_params"], [9, 1, 1, "", "set_predict_request"], [9, 1, 1, "", "set_score_request"]], "spe.tree": [[10, 0, 1, "", "AdaptiveLinearSmoother"], [11, 0, 1, "", "Tree"]], "spe.tree.AdaptiveLinearSmoother": [[10, 1, 1, "", "__init__"], [10, 1, 1, "", "get_linear_smoother"], [10, 1, 1, "", "predict"]], "spe.tree.Tree": [[11, 1, 1, "", "__init__"], [11, 1, 1, "", "apply"], [11, 1, 1, "", "cost_complexity_pruning_path"], [11, 1, 1, "", "decision_path"], [11, 2, 1, "", "feature_importances_"], [11, 1, 1, "", "fit"], [11, 1, 1, "", "get_depth"], [11, 1, 1, "", "get_group_X"], [11, 1, 1, "", "get_linear_smoother"], [11, 1, 1, "", "get_metadata_routing"], [11, 1, 1, "", "get_n_leaves"], [11, 1, 1, "", "get_params"], [11, 1, 1, "", "predict"], [11, 1, 1, "", "score"], [11, 1, 1, "", "set_fit_request"], [11, 1, 1, "", "set_params"], [11, 1, 1, "", "set_predict_request"], [11, 1, 1, "", "set_score_request"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "spe": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "bag": [0, 1, 15], "estim": [0, 2, 3, 4, 5, 18, 21], "forest": [0, 6, 23], "relaxed_lasso": [0, 7], "smoother": [0, 8, 9, 13, 19], "tree": [0, 10, 11], "parametricbaggingregressor": 1, "cp_adaptive_smooth": 2, "cp_arbitrari": 3, "cp_bag": 4, "cp_smoother": 5, "parametricrandomforestregressor": 6, "relaxedlasso": 7, "bsplineregressor": 8, "linearregress": 9, "adaptivelinearsmooth": 10, "document": 12, "adapt": 13, "linear": [13, 19], "simul": [13, 14, 15, 16, 18, 19, 20, 24], "y": [13, 14, 15, 16, 17, 18, 19, 20, 21], "overset": [13, 14, 15, 18, 19, 20, 21], "iid": [13, 14, 15, 18, 19, 20, 21], "sim": [13, 14, 15, 16, 18, 19, 20, 21], "mathcal": [13, 14, 15, 16, 18, 19, 20, 21], "n": [13, 14, 15, 16, 18, 19, 20, 21], "mu": [13, 14, 15, 16, 18, 19, 20, 21], "sigma_i": [13, 14, 15, 16, 18, 19, 20, 21], "begin": [13, 14, 15, 16, 18, 19, 20, 21], "pmatrix": [13, 14, 15, 16, 18, 19, 20, 21], "end": [13, 14, 15, 16, 18, 19, 20, 21], "left": [13, 14, 15, 16, 18, 19, 20, 21], "sigma_": [13, 14, 15, 16, 18, 19, 20, 21], "right": [13, 14, 15, 16, 18, 19, 20, 21], "arbitrari": 14, "model": [14, 15, 18], "spatial": 15, "80": 15, "20": 15, "split": 15, "random": [15, 17, 22, 23], "gener": [16, 17, 21], "BY": 16, "comparison": [16, 23], "x_": 16, "cdot": 16, "i": 16, "independ": 16, "uniform": 16, "spike": 16, "locat": 16, "interpol": 16, "base": 16, "cov": [16, 18], "matrix": 16, "0": 16, "sigma": 16, "2": 16, "setup": 17, "gaussian": 17, "x": 17, "comput": 17, "expect": 17, "correct": [17, 22], "one": 17, "fold": 17, "cv": 17, "v": [17, 18, 22], "sampl": 17, "cluster": 17, "oracl": 18, "covari": 18, "true": 18, "match": 18, "quickstart": 21, "toi": 21, "data": 21, "mse": 21, "trace": 22, "user": 24, "guid": 24, "get": 24, "start": 24}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "spe.bagging": [[0, "spe-bagging"]], "spe.estimators": [[0, "spe-estimators"]], "spe.forest": [[0, "spe-forest"]], "spe.relaxed_lasso": [[0, "spe-relaxed-lasso"]], "spe.smoothers": [[0, "spe-smoothers"]], "spe.tree": [[0, "spe-tree"]], "spe.bagging.ParametricBaggingRegressor": [[1, "spe-bagging-parametricbaggingregressor"]], "spe.estimators.cp_adaptive_smoother": [[2, "spe-estimators-cp-adaptive-smoother"]], "spe.estimators.cp_arbitrary": [[3, "spe-estimators-cp-arbitrary"]], "spe.estimators.cp_bagged": [[4, "spe-estimators-cp-bagged"]], "spe.estimators.cp_smoother": [[5, "spe-estimators-cp-smoother"]], "spe.forest.ParametricRandomForestRegressor": [[6, "spe-forest-parametricrandomforestregressor"]], "spe.relaxed_lasso.RelaxedLasso": [[7, "spe-relaxed-lasso-relaxedlasso"]], "spe.smoothers.BSplineRegressor": [[8, "spe-smoothers-bsplineregressor"]], "spe.smoothers.LinearRegression": [[9, "spe-smoothers-linearregression"]], "spe.tree.AdaptiveLinearSmoother": [[10, "spe-tree-adaptivelinearsmoother"]], "spe.tree.Tree": [[11, "spe-tree-tree"]], "SPE Documentation": [[12, "spe-documentation"]], "Adaptive Linear Smoothers": [[13, "Adaptive-Linear-Smoothers"]], "Simulate Y, Y^* \\overset{iid}{\\sim} \\mathcal{N}(\\mu, \\Sigma_Y)": [[13, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [14, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [15, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [15, "id1"], [18, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [19, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"], [20, "Simulate-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"]], "Simulate \\begin{pmatrix} Y \\\\ Y^* \\end{pmatrix} \\sim \\mathcal{N}\\left(\\begin{pmatrix} \\mu \\\\ \\mu \\end{pmatrix}, \\begin{pmatrix}\\Sigma_Y & \\Sigma_{Y, Y^*} \\\\ \\Sigma_{Y^*, Y} & \\Sigma_{Y} \\end{pmatrix}\\right)": [[13, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [14, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [15, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [15, "id2"], [16, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [18, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [19, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"], [20, "Simulate-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"]], "Arbitrary Models": [[14, "Arbitrary-Models"]], "Bagged Models": [[15, "Bagged-Models"]], "Spatial 80/20 Split": [[15, "Spatial-80/20-Split"]], "Random 80/20 Split": [[15, "Random-80/20-Split"]], "Generalized BY Comparison": [[16, "Generalized-BY-Comparison"]], "X_{\\cdot,i} independently generated by uniform spikes at locations, then interpolate based on cov matrix": [[16, "X_{\\cdot,i}-independently-generated-by-uniform-spikes-at-locations,-then-interpolate-based-on-cov-matrix"]], "X_{i,\\cdot} \\sim \\mathcal{N}(0, I\\sigma^2)": [[16, "X_{i,\\cdot}-\\sim-\\mathcal{N}(0,-I\\sigma^2)"]], "Setup": [[17, "Setup"]], "Generate Gaussian X, Y": [[17, "Generate-Gaussian-X,-Y"]], "Compute expected correction for one fold of CV vs expected correction for random sample": [[17, "Compute-expected-correction-for-one-fold-of-CV-vs-expected-correction-for-random-sample"]], "Compute expected correction for one fold of CV vs expected correction for clustered sample": [[17, "Compute-expected-correction-for-one-fold-of-CV-vs-expected-correction-for-clustered-sample"]], "Estimated vs Oracle Covariance": [[18, "Estimated-vs-Oracle-Covariance"]], "Estimate with True Covs": [[18, "Estimate-with-True-Covs"], [18, "id1"]], "Estimate with Matching Model": [[18, "Estimate-with-Matching-Model"], [18, "id2"]], "Linear Smoothers": [[19, "Linear-Smoothers"]], "Quickstart": [[21, "Quickstart"]], "Generate toy data": [[21, "Generate-toy-data"]], "Estimate MSE for Y, Y^* \\overset{iid}{\\sim} \\mathcal{N}(\\mu, \\Sigma_Y)": [[21, "Estimate-MSE-for-Y,-Y^*-\\overset{iid}{\\sim}-\\mathcal{N}(\\mu,-\\Sigma_Y)"]], "Estimate MSE for \\begin{pmatrix} Y \\\\ Y^* \\end{pmatrix} \\sim \\mathcal{N}\\left(\\begin{pmatrix} \\mu \\\\ \\mu \\end{pmatrix}, \\begin{pmatrix}\\Sigma_Y & \\Sigma_{Y, Y^*} \\\\ \\Sigma_{Y^*, Y} & \\Sigma_{Y} \\end{pmatrix}\\right)": [[21, "Estimate-MSE-for-\\begin{pmatrix}-Y-\\\\-Y^*-\\end{pmatrix}-\\sim-\\mathcal{N}\\left(\\begin{pmatrix}-\\mu-\\\\-\\mu-\\end{pmatrix},-\\begin{pmatrix}\\Sigma_Y-&-\\Sigma_{Y,-Y^*}-\\\\-\\Sigma_{Y^*,-Y}-&-\\Sigma_{Y}-\\end{pmatrix}\\right)"]], "Trace Correction vs Random Correction": [[22, "Trace-Correction-vs-Random-Correction"]], "Random Forest Comparisons": [[23, "Random-Forest-Comparisons"]], "User Guide": [[24, "user-guide"]], "Getting started": [[24, "getting-started"]], "Simulations": [[24, "simulations"]]}, "indexentries": {"parametricbaggingregressor (class in spe.bagging)": [[1, "spe.bagging.ParametricBaggingRegressor"]], "__init__() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.__init__"]], "estimators_samples_ (spe.bagging.parametricbaggingregressor attribute)": [[1, "spe.bagging.ParametricBaggingRegressor.estimators_samples_"]], "fit() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.fit"]], "get_linear_smoother() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_metadata_routing"]], "get_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.get_params"]], "predict() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.predict"]], "score() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.score"]], "set_fit_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_fit_request"]], "set_params() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_params"]], "set_predict_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_predict_request"]], "set_score_request() (spe.bagging.parametricbaggingregressor method)": [[1, "spe.bagging.ParametricBaggingRegressor.set_score_request"]], "cp_adaptive_smoother() (in module spe.estimators)": [[2, "spe.estimators.cp_adaptive_smoother"]], "cp_arbitrary() (in module spe.estimators)": [[3, "spe.estimators.cp_arbitrary"]], "cp_bagged() (in module spe.estimators)": [[4, "spe.estimators.cp_bagged"]], "cp_smoother() (in module spe.estimators)": [[5, "spe.estimators.cp_smoother"]], "parametricrandomforestregressor (class in spe.forest)": [[6, "spe.forest.ParametricRandomForestRegressor"]], "__init__() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.__init__"]], "apply() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.apply"]], "decision_path() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.decision_path"]], "estimators_samples_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.estimators_samples_"]], "feature_importances_ (spe.forest.parametricrandomforestregressor attribute)": [[6, "spe.forest.ParametricRandomForestRegressor.feature_importances_"]], "fit() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.fit"]], "get_group_x() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_group_X"]], "get_linear_smoother() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_metadata_routing"]], "get_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.get_params"]], "predict() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.predict"]], "score() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.score"]], "set_fit_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_fit_request"]], "set_params() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_params"]], "set_predict_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_predict_request"]], "set_score_request() (spe.forest.parametricrandomforestregressor method)": [[6, "spe.forest.ParametricRandomForestRegressor.set_score_request"]], "relaxedlasso (class in spe.relaxed_lasso)": [[7, "spe.relaxed_lasso.RelaxedLasso"]], "__init__() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.__init__"]], "fit() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit"]], "fit_linear() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.fit_linear"]], "get_linear_smoother() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_linear_smoother"]], "get_metadata_routing() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_metadata_routing"]], "get_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_params"]], "get_selected_x() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.get_selected_X"]], "predict() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.predict"]], "set_fit_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_fit_request"]], "set_params() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_params"]], "set_predict_request() (spe.relaxed_lasso.relaxedlasso method)": [[7, "spe.relaxed_lasso.RelaxedLasso.set_predict_request"]], "bsplineregressor (class in spe.smoothers)": [[8, "spe.smoothers.BSplineRegressor"]], "__init__() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.__init__"]], "fit() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.fit"]], "get_group_x() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_group_X"]], "get_linear_smoother() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_linear_smoother"]], "get_metadata_routing() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_metadata_routing"]], "get_params() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.get_params"]], "predict() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.predict"]], "set_params() (spe.smoothers.bsplineregressor method)": [[8, "spe.smoothers.BSplineRegressor.set_params"]], "linearregression (class in spe.smoothers)": [[9, "spe.smoothers.LinearRegression"]], "__init__() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.__init__"]], "fit() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.fit"]], "get_group_x() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_group_X"]], "get_linear_smoother() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_linear_smoother"]], "get_metadata_routing() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_metadata_routing"]], "get_params() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.get_params"]], "predict() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.predict"]], "score() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.score"]], "set_fit_request() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_fit_request"]], "set_params() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_params"]], "set_predict_request() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_predict_request"]], "set_score_request() (spe.smoothers.linearregression method)": [[9, "spe.smoothers.LinearRegression.set_score_request"]], "adaptivelinearsmoother (class in spe.tree)": [[10, "spe.tree.AdaptiveLinearSmoother"]], "__init__() (spe.tree.adaptivelinearsmoother method)": [[10, "spe.tree.AdaptiveLinearSmoother.__init__"]], "get_linear_smoother() (spe.tree.adaptivelinearsmoother method)": [[10, "spe.tree.AdaptiveLinearSmoother.get_linear_smoother"]], "predict() (spe.tree.adaptivelinearsmoother method)": [[10, "spe.tree.AdaptiveLinearSmoother.predict"]], "tree (class in spe.tree)": [[11, "spe.tree.Tree"]], "__init__() (spe.tree.tree method)": [[11, "spe.tree.Tree.__init__"]], "apply() (spe.tree.tree method)": [[11, "spe.tree.Tree.apply"]], "cost_complexity_pruning_path() (spe.tree.tree method)": [[11, "spe.tree.Tree.cost_complexity_pruning_path"]], "decision_path() (spe.tree.tree method)": [[11, "spe.tree.Tree.decision_path"]], "feature_importances_ (spe.tree.tree attribute)": [[11, "spe.tree.Tree.feature_importances_"]], "fit() (spe.tree.tree method)": [[11, "spe.tree.Tree.fit"]], "get_depth() (spe.tree.tree method)": [[11, "spe.tree.Tree.get_depth"]], "get_group_x() (spe.tree.tree method)": [[11, "spe.tree.Tree.get_group_X"]], "get_linear_smoother() (spe.tree.tree method)": [[11, "spe.tree.Tree.get_linear_smoother"]], "get_metadata_routing() (spe.tree.tree method)": [[11, "spe.tree.Tree.get_metadata_routing"]], "get_n_leaves() (spe.tree.tree method)": [[11, "spe.tree.Tree.get_n_leaves"]], "get_params() (spe.tree.tree method)": [[11, "spe.tree.Tree.get_params"]], "predict() (spe.tree.tree method)": [[11, "spe.tree.Tree.predict"]], "score() (spe.tree.tree method)": [[11, "spe.tree.Tree.score"]], "set_fit_request() (spe.tree.tree method)": [[11, "spe.tree.Tree.set_fit_request"]], "set_params() (spe.tree.tree method)": [[11, "spe.tree.Tree.set_params"]], "set_predict_request() (spe.tree.tree method)": [[11, "spe.tree.Tree.set_predict_request"]], "set_score_request() (spe.tree.tree method)": [[11, "spe.tree.Tree.set_score_request"]]}})